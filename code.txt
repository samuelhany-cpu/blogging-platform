The following is a digest of the repository "blogging-platform".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: blogging-platform
Files Analyzed: 56
Total Text Size: 158.01 KB
Estimated Tokens (text only): ~40,931

--- DIRECTORY STRUCTURE ---
blogging-platform/
├── backend/
│   ├── config/
│   │   ├── db.js
│   │   └── jwt.js
│   ├── controllers/
│   │   ├── articleController.js
│   │   ├── authController.js
│   │   ├── commentController.js
│   │   ├── coverController.js
│   │   └── userController.js
│   ├── middlewares/
│   │   ├── auth.js
│   │   ├── errorHandler.js
│   │   └── uploadMiddleware.js
│   ├── models/
│   │   └── Article.js
│   ├── routes/
│   │   ├── articleRoutes.js
│   │   ├── authRoutes.js
│   │   ├── commentRoutes.js
│   │   └── userRoutes.js
│   ├── utils/
│   │   └── logger.js
│   ├── app.js
│   ├── code.txt
│   ├── eslint.config.js
│   ├── package.json
│   └── server.js
├── frontend/
│   ├── src/
│   │   ├── api/
│   │   │   └── user.js
│   │   ├── components/
│   │   │   ├── ArticleCard.jsx
│   │   │   ├── CommentSection.jsx
│   │   │   ├── Navbar.jsx
│   │   │   └── ProtectedRoute.jsx
│   │   ├── context/
│   │   │   └── AuthContext.jsx
│   │   ├── pages/
│   │   │   ├── ArticleDetails.jsx
│   │   │   ├── ArticleForm.jsx
│   │   │   ├── Articles.jsx
│   │   │   ├── Home.jsx
│   │   │   ├── Login.jsx
│   │   │   ├── Register.jsx
│   │   │   ├── UserDashboard.jsx
│   │   │   └── UserProfile.jsx
│   │   ├── services/
│   │   │   └── api.js
│   │   ├── utils/
│   │   │   └── axiosInstance.js
│   │   ├── App.css
│   │   ├── App.js
│   │   ├── App.test.js
│   │   ├── index.css
│   │   ├── index.js
│   │   ├── logo.svg
│   │   ├── reportWebVitals.js
│   │   └── setupTests.js
│   ├── code.txt
│   ├── eslint.config.js
│   ├── eslint.config.mjs
│   ├── package.json
│   ├── postcss.config.js
│   ├── README.md
│   └── tailwind.config.js
├── eslint.config.js
├── LICENSE
├── package.json
└── README.md


--- FILE CONTENTS ---
============================================================
FILE: backend/config/db.js
============================================================
const mysql = require("mysql2/promise"); // ⬅ this is important
require("dotenv").config();

const db = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME,
});

module.exports = db;


============================================================
FILE: backend/controllers/articleController.js
============================================================
const db = require("../config/db");
const jwt = require("jsonwebtoken");
require("dotenv").config();

// Helper to extract userId from token
const getUserIdFromToken = (token) => {
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    return decoded.id;
  } catch (error) {
    throw new Error("Invalid token");
  }
}; // make sure this function is defined

exports.create = async (req, res) => {
  try {
    const { title, content, category, tags } = req.body;
    const cover = req.file?.filename || null;

    // Check token
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(403).json({ message: "Token missing" });

    const userId = getUserIdFromToken(token);

    // Enhanced input validation
    if (!title || !content || !category) {
      return res
        .status(400)
        .json({ message: "Title, content, and category are required" });
    }

    // Sanitize inputs
    const sanitizedTitle = title.trim().substring(0, 255);
    const sanitizedContent = content.trim();
    const sanitizedCategory = category.trim().substring(0, 100);

    if (sanitizedTitle.length < 3) {
      return res
        .status(400)
        .json({ message: "Title must be at least 3 characters long" });
    }

    if (sanitizedContent.length < 10) {
      return res
        .status(400)
        .json({ message: "Content must be at least 10 characters long" });
    }

    // Format tags as comma-separated string
    const formattedTags = Array.isArray(tags) ? tags.join(",") : tags;

    // Insert article
    const [result] = await db.query(
      "INSERT INTO articles (title, content, category, tags, user_id, cover) VALUES (?, ?, ?, ?, ?,?)",
      [
        sanitizedTitle,
        sanitizedContent,
        sanitizedCategory,
        formattedTags,
        userId,
        cover,
      ],
    );

    // Fetch inserted article
    const [article] = await db.query("SELECT * FROM articles WHERE id = ?", [
      result.insertId,
    ]);

    res.status(201).json(article[0]);
  } catch (error) {
    console.error("Create Error:", error);
    if (error.message === "Invalid token") {
      res.status(403).json({ message: "Unauthorized" }); // 🔁 consistent key
    } else {
      res.status(500).json({ message: "Internal Server Error" }); // 🔁
    }
  }
};

exports.getAll = async (req, res) => {
  try {
    const { tag, search } = req.query;

    let query = `
      SELECT 
        articles.id,
        articles.title,
        articles.content,
        articles.category,
        articles.tags,
        articles.cover,
        articles.created_at,
        users.username AS author
      FROM articles
      LEFT JOIN users ON articles.user_id = users.id
    `;

    const params = [];
    const conditions = [];

    if (tag) {
      conditions.push(`articles.tags LIKE ?`);
      params.push(`%${tag}%`);
    }

    if (search) {
      conditions.push(`(articles.title LIKE ? OR articles.content LIKE ?)`);
      params.push(`%${search}%`, `%${search}%`);
    }

    if (conditions.length > 0) {
      query += ` WHERE ` + conditions.join(" AND ");
    }

    query += ` ORDER BY articles.created_at DESC`;

    const [articles] = await db.query(query, params);
    res.status(200).json(articles);
  } catch (error) {
    console.error("🔍 getAll Articles Error:", error.message);
    res.status(500).json({ error: "Internal Server Error" });
  }
};

exports.getById = async (req, res) => {
  try {
    const { id } = req.params;
    const [article] = await db.query("SELECT * FROM articles WHERE id = ?", [
      id,
    ]);

    if (article.length === 0) {
      return res.status(404).json({ error: "Article not found" });
    }

    res.status(200).json(article[0]);
  } catch (error) {
    console.error("GetById Error:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
};

exports.update = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, content, category, tags, removeCover } = req.body;
    const cover = req.file?.filename || null;
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(403).json({ error: "Token missing" });

    const userId = getUserIdFromToken(token);

    // Enhanced input validation
    if (!title || !content || !category) {
      return res
        .status(400)
        .json({ message: "Title, content, and category are required" });
    }

    // Sanitize inputs
    const sanitizedTitle = title.trim().substring(0, 255);
    const sanitizedContent = content.trim();
    const sanitizedCategory = category.trim().substring(0, 100);

    if (sanitizedTitle.length < 3) {
      return res
        .status(400)
        .json({ message: "Title must be at least 3 characters long" });
    }

    if (sanitizedContent.length < 10) {
      return res
        .status(400)
        .json({ message: "Content must be at least 10 characters long" });
    }

    const formattedTags = Array.isArray(tags) ? tags.join(",") : tags;

    // Build update query based on cover handling
    let updateQuery, updateParams;

    if (removeCover === "true") {
      // If user wants to remove cover, set cover to NULL
      updateQuery =
        "UPDATE articles SET title = ?, content = ?, category = ?, tags = ?, cover = NULL WHERE id = ? AND user_id = ?";
      updateParams = [
        sanitizedTitle,
        sanitizedContent,
        sanitizedCategory,
        formattedTags,
        id,
        userId,
      ];
    } else if (cover) {
      // If new cover is uploaded, update with cover
      updateQuery =
        "UPDATE articles SET title = ?, content = ?, category = ?, tags = ?, cover = ? WHERE id = ? AND user_id = ?";
      updateParams = [
        sanitizedTitle,
        sanitizedContent,
        sanitizedCategory,
        formattedTags,
        cover,
        id,
        userId,
      ];
    } else {
      // If no new cover, update without changing cover
      updateQuery =
        "UPDATE articles SET title = ?, content = ?, category = ?, tags = ? WHERE id = ? AND user_id = ?";
      updateParams = [
        sanitizedTitle,
        sanitizedContent,
        sanitizedCategory,
        formattedTags,
        id,
        userId,
      ];
    }

    const [result] = await db.query(updateQuery, updateParams);

    if (result.affectedRows === 0) {
      return res
        .status(404)
        .json({ error: "Article not found or not authorized" });
    }

    const [updated] = await db.query("SELECT * FROM articles WHERE id = ?", [
      id,
    ]);
    res.status(200).json(updated[0]);
  } catch (error) {
    console.error("Update Error:", error.message);
    console.error("Request body:", req.body);
    console.error("Request file:", req.file);
    if (error.message === "Invalid token") {
      res.status(403).json({ error: "Unauthorized" });
    } else {
      res.status(500).json({ error: "Internal Server Error" });
    }
  }
};

exports.delete = async (req, res) => {
  try {
    const articleId = req.params.id;
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(403).json({ message: "Token missing" });

    let userId;
    try {
      userId = getUserIdFromToken(token);
    } catch (err) {
      return res.status(403).json({ message: "Invalid token" });
    }

    const [[user]] = await db.query("SELECT * FROM users WHERE id = ?", [
      userId,
    ]);
    if (!user) return res.status(403).json({ message: "User not found" });

    const [[article]] = await db.query("SELECT * FROM articles WHERE id = ?", [
      articleId,
    ]);
    if (!article) return res.status(404).json({ message: "Article not found" });

    // This is the key line
    if (user.id !== article.user_id && user.role !== "admin") {
      return res
        .status(403)
        .json({ message: "Forbidden: not author or admin" }); // ✅ Fix: 403
    }

    await db.query("DELETE FROM articles WHERE id = ?", [articleId]);
    res.status(200).json({ message: "Article deleted" });
  } catch (err) {
    console.error("Delete Error:", err.message);
    res.status(500).json({ message: "Internal Server Error" });
  }
};


============================================================
FILE: backend/controllers/authController.js
============================================================
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const db = require("../config/db");
require("dotenv").config();

exports.registerUser = async (req, res) => {
  const { username, email, password } = req.body;

  try {
    const hashedPassword = await bcrypt.hash(password, 10);

    const [existing] = await db.query(
      `SELECT * FROM users WHERE email = ? OR username = ?`,
      [email, username],
    );

    if (existing.length > 0)
      return res.status(400).json({ message: "User already exists" });

    await db.query(
      `INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)`,
      [username, email, hashedPassword],
    );

    res.status(201).json({ message: "User registered successfully" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.loginUser = async (req, res) => {
  const { email, password } = req.body;

  try {
    const [users] = await db.query(`SELECT * FROM users WHERE email = ?`, [
      email,
    ]);

    if (users.length === 0)
      return res.status(404).json({ message: "User Not Found" });

    const user = users[0];
    const isMatch = await bcrypt.compare(password, user.password_hash);

    if (!isMatch) return res.status(401).json({ message: "Invalid Password" });

    const token = jwt.sign(
      { id: user.id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1d" },
    );

    res.json({
      token,
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
        role: user.role,
      },
    });
  } catch (err) {
    res.status(500).json({ message: "Server Error", error: err.message });
  }
};


============================================================
FILE: backend/controllers/commentController.js
============================================================
const db = require("../config/db");
const jwt = require("jsonwebtoken");
require("dotenv").config();

const getUserFromToken = (authHeader) => {
  if (!authHeader) throw new Error("No token provided");
  const token = authHeader.split(" ")[1];
  return jwt.verify(token, process.env.JWT_SECRET);
};

// ✅ Add Comment
exports.addComment = async (req, res) => {
  try {
    const { content } = req.body;
    const articleId = req.params.id;
    const { id: userId } = getUserFromToken(req.headers.authorization);

    if (!content) return res.status(400).json({ error: "Content is required" });

    const [result] = await db.query(
      "INSERT INTO comments (user_id, article_id, content) VALUES (?, ?, ?)",
      [userId, articleId, content],
    );

    const [comment] = await db.query("SELECT * FROM comments WHERE id = ?", [
      result.insertId,
    ]);
    res.status(201).json(comment[0]);
  } catch (err) {
    console.error("Add Comment Error:", err);
    res.status(500).json({ error: "Internal Server Error" });
  }
};

// ✅ Get Comments for an Article (with usernames)
exports.getCommentsByArticleId = async (req, res) => {
  try {
    const articleId = req.params.id;

    const [comments] = await db.query(
      `
      SELECT comments.*, users.username 
      FROM comments 
      JOIN users ON comments.user_id = users.id 
      WHERE comments.article_id = ?
      ORDER BY comments.created_at ASC
      `,
      [articleId],
    );

    res.status(200).json(comments);
  } catch (err) {
    console.error("Get Comments Error:", err);
    res.status(500).json({ error: "Internal Server Error" });
  }
};

// ✅ Delete Comment (owner or admin)
exports.deleteComment = async (req, res) => {
  try {
    const commentId = req.params.id;
    const { id: userId, role } = getUserFromToken(req.headers.authorization);

    let query = "DELETE FROM comments WHERE id = ?";
    const values = [commentId];

    if (role !== "admin") {
      query += " AND user_id = ?";
      values.push(userId);
    }

    const [result] = await db.query(query, values);
    if (result.affectedRows === 0)
      return res
        .status(403)
        .json({ error: "Not authorized or comment not found" });

    res.json({ message: "Comment deleted successfully" });
  } catch (err) {
    console.error("Delete Comment Error:", err);
    res.status(500).json({ error: "Internal Server Error" });
  }
};

// ✅ Edit Comment (only owner)
exports.editComment = async (req, res) => {
  try {
    const commentId = req.params.id;
    const { content } = req.body;
    const { id: userId } = getUserFromToken(req.headers.authorization);

    const [result] = await db.query(
      "UPDATE comments SET content = ? WHERE id = ? AND user_id = ?",
      [content, commentId, userId],
    );

    if (result.affectedRows === 0)
      return res
        .status(403)
        .json({ error: "Not authorized or comment not found" });

    const [updated] = await db.query("SELECT * FROM comments WHERE id = ?", [
      commentId,
    ]);
    res.json(updated[0]);
  } catch (err) {
    console.error("Edit Comment Error:", err);
    res.status(500).json({ error: "Internal Server Error" });
  }
};


============================================================
FILE: backend/controllers/coverController.js
============================================================
const fs = require("fs").promises;
const path = require("path");

// Delete cover image file
exports.deleteCover = async (filename) => {
  if (!filename) return;

  try {
    const filePath = path.join(__dirname, "..", "uploads", filename);
    await fs.unlink(filePath);
  } catch (error) {
    // File might not exist, which is fine
    console.error("Error deleting cover file:", error.message);
  }
};

// Get cover image URL
exports.getCoverUrl = (filename) => {
  if (!filename) return null;
  return `/uploads/${filename}`;
};

// Validate file type
exports.validateFileType = (file) => {
  const allowedTypes = ["image/jpeg", "image/jpg", "image/png", "image/gif"];
  return allowedTypes.includes(file.mimetype);
};

// Validate file size (5MB limit)
exports.validateFileSize = (file) => {
  const maxSize = 5 * 1024 * 1024; // 5MB
  return file.size <= maxSize;
};


============================================================
FILE: backend/controllers/userController.js
============================================================
const db = require("../config/db");

exports.getUserProfile = async (req, res) => {
  try {
    const userId = req.params.id;

    // Fetch user
    const [users] = await db.query(
      "SELECT id, username, email FROM users WHERE id = ?",
      [userId],
    );
    if (users.length === 0)
      return res.status(404).json({ error: "User not found" });

    // Fetch articles
    const [articles] = await db.query(
      "SELECT id, title, created_at FROM articles WHERE user_id = ?",
      [userId],
    );

    //Fetch Comments
    const [comments] = await db.query(
      "SELECT id, content, created_at FROM comments WHERE user_id = ?",
      [userId],
    );

    res.json({
      user: users[0],
      articles,
      comments,
    });
  } catch (err) {
    console.error("User Profile Error:", err.message);
    res.status(500).json({ error: "Internal Server Error" });
  }
};

exports.getUserArticles = async (req, res) => {
  try {
    const userId = req.params.id;

    // Fetch user's articles with full details
    const [articles] = await db.query(
      `SELECT 
        id, 
        title, 
        content, 
        category, 
        tags, 
        cover, 
        created_at, 
        updated_at 
      FROM articles 
      WHERE user_id = ? 
      ORDER BY created_at DESC`,
      [userId],
    );

    res.json(articles);
  } catch (err) {
    console.error("Get User Articles Error:", err.message);
    res.status(500).json({ error: "Internal Server Error" });
  }
};


============================================================
FILE: backend/middlewares/auth.js
============================================================
// ✅ auth.js
const jwt = require("jsonwebtoken");

exports.authenticateToken = (req, res, next) => {
  const authHeader = req.headers["authorization"];
  const token = authHeader?.split(" ")[1];

  if (!token) return res.status(401).json({ message: "Access token missing" });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch {
    return res.status(403).json({ message: "Invalid token" });
  }
};


============================================================
FILE: backend/middlewares/errorHandler.js
============================================================
const errorHandler = (err, req, res, next) => {
  console.error("Error:", err.message);

  const statusCode = err.statusCode || 500;

  res.status(statusCode).json({
    error: err.message || "Internal Server Error",
  });
};

module.exports = errorHandler;


============================================================
FILE: backend/middlewares/uploadMiddleware.js
============================================================
// backend/middlewares/uploadMiddleware.js
const multer = require("multer");
const path = require("path");

// Sanitize filenames (remove special characters)
const sanitizeFilename = (filename) => filename.replace(/[^a-zA-Z0-9.-]/g, "_");

// Multer storage config
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, "..", "uploads"));
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    const base = path.basename(file.originalname, ext);
    const sanitized = sanitizeFilename(base);
    cb(null, `${Date.now()}-${sanitized}${ext}`);
  },
});

// Enhanced file type filter
const fileFilter = (req, file, cb) => {
  const allowedTypes = /jpeg|jpg|png|gif/;
  const isValid = allowedTypes.test(
    path.extname(file.originalname).toLowerCase(),
  );

  if (!isValid) {
    return cb(
      new Error("Only image files (JPEG, PNG, GIF) are allowed"),
      false,
    );
  }

  // Check MIME type as well
  const allowedMimeTypes = [
    "image/jpeg",
    "image/jpg",
    "image/png",
    "image/gif",
  ];
  if (!allowedMimeTypes.includes(file.mimetype)) {
    return cb(new Error("Invalid file type detected"), false);
  }

  cb(null, true);
};

const upload = multer({
  storage,
  fileFilter,
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB limit (optional)
  },
});

module.exports = upload;


============================================================
FILE: backend/models/Article.js
============================================================
const db = require("../config/db");
const { v4: uuidv4 } = require("uuid");

class Article {
  //create new article
  static async create({ title, content, tags = "", userId }) {
    const [result] = await db.query(
      `INSERT INTO articles
            (title,content,tags,userId)
            VALUES(?,?,?,?) `,
      [title, content, tags, userId],
    );

    return this.getById(result.insertId);
  }

  //get all articles
  static async getAll({ tag, page = 1, limit = 10 } = {}) {
    let query = `SELECT articles.*,
        users.name AS author
        FROM articles
        LEFT JOIN users ON articles.user_id = users.id
        `;
    const params = [];
    if (tag) {
      query += `WHERE tags LIKE ?`;
      params.push(`%${tag}%`);
    }
    //pagination
    query += `
        LIMIT ? OFFSET ?
        `;
    params.push(limit, (page - 1) * limit);
    const [article] = await db.query(query, params);
    return article;
  }
  static async getById(id) {
    const [[article]] = await db.query(
      `SELECT 
        articles.*, 
        users.username AS author 
        FROM articles 
        LEFT JOIN users ON articles.user_id = users.id 
        WHERE articles.id = ?`,
      [id],
    );
    return article || null;
  }
  static async update(id, { title, content, tags, userId }) {
    await db.query(
      `
            UPDATE articles
            SET title = ?, content = ?, tags = ?, updated_at = CURRENT_TIMESTAMP 
            WHERE id = ? AND user_id = ?`,
      [title, content, tags, id, userId],
    );
  }
  static async delete(id, userId) {
    const [result] = await db.query(
      `DELETE FROM articles 
       WHERE id = ? AND user_id = ?`,
      [id, userId],
    );
    return result.affectedRows > 0;
  }
  static async getByUser(userId) {
    const [articles] = await db.query(
      `SELECT * FROM articles WHERE user_id = ?`,
      [userId],
    );
    return articles || null;
  }
}

module.exports = Article;


============================================================
FILE: backend/routes/articleRoutes.js
============================================================
const express = require("express");
const router = express.Router();
const upload = require("../middlewares/uploadMiddleware");
const { authenticateToken } = require("../middlewares/auth");

const {
  create,
  getAll,
  getById,
  update,
  delete: deleteArticle,
} = require("../controllers/articleController");

const { addComment } = require("../controllers/commentController");

// ✅ Only ONE route for article creation with upload middleware
router.post("/articles", authenticateToken, upload.single("cover"), create);

router.get("/articles", getAll);
router.get("/articles/:id", getById);
router.put("/articles/:id", authenticateToken, upload.single("cover"), update);
router.delete("/articles/:id", authenticateToken, deleteArticle);
router.post("/articles/:id/comments", authenticateToken, addComment);

module.exports = router;


============================================================
FILE: backend/routes/authRoutes.js
============================================================
const express = require("express");
const router = express.Router();
const { registerUser, loginUser } = require("../controllers/authController");
const rateLimit = require("express-rate-limit");

const loginLimiter = rateLimit({
  windowMs: 10 * 60 * 1000, // 10 minutes
  max: 5,
  message: { error: "Too many login attempts. Please try again later." },
  standardHeaders: true,
  legacyHeaders: false,
});

router.post("/register", registerUser);
router.post("/login", loginUser);

module.exports = router;


============================================================
FILE: backend/routes/commentRoutes.js
============================================================
const express = require("express");
const router = express.Router();
const {
  addComment,
  getCommentsByArticleId,
  deleteComment,
  editComment,
} = require("../controllers/commentController");

// Comment routes
router.get("/articles/:id/comments", getCommentsByArticleId);
router.delete("/comments/:id", deleteComment);
router.put("/comments/:id", editComment);

module.exports = router;


============================================================
FILE: backend/routes/userRoutes.js
============================================================
const express = require("express");
const router = express.Router();
const {
  getUserProfile,
  getUserArticles,
} = require("../controllers/userController.js");
const { authenticateToken } = require("../middlewares/auth.js");

router.get("/users/:id/profile", authenticateToken, getUserProfile);
router.get("/users/:id/articles", authenticateToken, getUserArticles);

module.exports = router;


============================================================
FILE: backend/app.js
============================================================
const express = require("express");
const cors = require("cors");
const path = require("path");
const app = express();
require("dotenv").config();

// 🛡 Allow requests from frontend (adjust origin for production)
app.use(
  cors({
    origin: "http://localhost:3000",
    credentials: true,
  }),
);

// 📦 Body parser for JSON
app.use(express.json());

// 🖼 Serve uploaded images statically
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

// 🚏 Import route files
const authRoutes = require("./routes/authRoutes");
const articleRoutes = require("./routes/articleRoutes");
const commentRoutes = require("./routes/commentRoutes");
const userRoutes = require("./routes/userRoutes");

// 🔗 Mount routes
app.use("/api/auth", authRoutes);
app.use("/api", articleRoutes);
app.use("/api", commentRoutes);
app.use("/api", userRoutes);

module.exports = app;


============================================================
FILE: backend/code.txt
============================================================
The following is a digest of the repository "backend".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: backend
Files Analyzed: 25
Total Text Size: 26.26 KB
Estimated Tokens (text only): ~6,906

--- DIRECTORY STRUCTURE ---
backend/
├── config/
│   ├── db.js
│   └── jwt.js
├── controllers/
│   ├── articleController.js
│   ├── authController.js
│   ├── commentController.js
│   └── userController.js
├── middlewares/
│   ├── auth.js
│   └── errorHandler.js
├── models/
│   └── Article.js
├── routes/
│   ├── articleRoutes.js
│   ├── authRoutes.js
│   ├── commentRoutes.js
│   └── userRoutes.js
├── tests/
│   ├── middleware/
│   │   └── authMiddleware.test.js
│   ├── utils/
│   │   ├── setup.js
│   │   ├── testLoginHelper.js
│   │   └── testUtils.js
│   ├── articles.test.js
│   ├── auth.test.js
│   └── comments.test.js
├── utils/
│   └── logger.js
├── app.js
├── hash.js
├── package.json
└── server.js


--- FILE CONTENTS ---
============================================================
FILE: config/db.js
============================================================
const mysql = require('mysql2/promise'); // ⬅ this is important
require('dotenv').config();

const db = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME
});

module.exports = db;


============================================================
FILE: controllers/articleController.js
============================================================
const db = require('../config/db');
const jwt = require('jsonwebtoken');
require('dotenv').config();

// Helper to extract userId from token
const getUserIdFromToken = (token) => {
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    return decoded.id;
  } catch (error) {
    throw new Error('Invalid token');
  }
}; // make sure this function is defined

exports.create = async (req, res) => {
  try {
    const { title, content, category, tags } = req.body;

    // Check token
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(403).json({ message: 'Token missing' }); // 🔁 changed 'error' to 'message'

    const userId = getUserIdFromToken(token);
    console.log('🔑 Decoded User ID:', userId);
    // Validate input
    if (!title || !content || !category) {
      return res.status(400).json({ message: 'All fields are required' }); // 🔁 here too
    }

    // Format tags as comma-separated string
    const formattedTags = Array.isArray(tags) ? tags.join(',') : tags;

    // Insert article
    const [result] = await db.query(
      'INSERT INTO articles (title, content, category, tags, user_id) VALUES (?, ?, ?, ?, ?)',
      [title, content, category, formattedTags, userId]
    );

    // Fetch inserted article
    const [article] = await db.query('SELECT * FROM articles WHERE id = ?', [result.insertId]);

    res.status(201).json(article[0]);
  } catch (error) {
    console.error('Create Error:', error.message);
    if (error.message === 'Invalid token') {
      res.status(403).json({ message: 'Unauthorized' }); // 🔁 consistent key
    } else {
      res.status(500).json({ message: 'Internal Server Error' }); // 🔁
    }
  }
};


exports.getAll = async (req, res) => {
  try {
    const [articles] = await db.query('SELECT * FROM articles');
    res.status(200).json(articles);
  } catch (error) {
    console.error('GetAll Error:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

exports.getById = async (req, res) => {
  try {
    const { id } = req.params;
    const [article] = await db.query('SELECT * FROM articles WHERE id = ?', [id]);

    if (article.length === 0) {
      return res.status(404).json({ error: 'Article not found' });
    }

    res.status(200).json(article[0]);
  } catch (error) {
    console.error('GetById Error:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

exports.update = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, content, category, tags } = req.body;
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(403).json({ error: 'Token missing' });

    const userId = getUserIdFromToken(token);

    const formattedTags = Array.isArray(tags) ? tags.join(',') : tags;

    const [result] = await db.query(
      'UPDATE articles SET title = ?, content = ?, category = ?, tags = ? WHERE id = ? AND user_id = ?',
      [title, content, category, formattedTags, id, userId]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Article not found or not authorized' });
    }

    const [updated] = await db.query('SELECT * FROM articles WHERE id = ?', [id]);
    res.status(200).json(updated[0]);
  } catch (error) {
    console.error('Update Error:', error.message);
    if (error.message === 'Invalid token') {
      res.status(403).json({ error: 'Unauthorized' });
    } else {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
};

exports.delete = async (req, res) => {
  try {
    const articleId = req.params.id;
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(403).json({ message: 'Token missing' });

    let userId;
    try {
      userId = getUserIdFromToken(token);
    } catch (err) {
      return res.status(403).json({ message: 'Invalid token' });
    }

    const [[user]] = await db.query('SELECT * FROM users WHERE id = ?', [userId]);
    if (!user) return res.status(403).json({ message: 'User not found' });

    const [[article]] = await db.query('SELECT * FROM articles WHERE id = ?', [articleId]);
    if (!article) return res.status(404).json({ message: 'Article not found' });

    // This is the key line
    if (user.id !== article.user_id && user.role !== 'admin') {
      return res.status(403).json({ message: 'Forbidden: not author or admin' }); // ✅ Fix: 403
    }

    await db.query('DELETE FROM articles WHERE id = ?', [articleId]);
    res.status(200).json({ message: 'Article deleted' });
  } catch (err) {
    console.error('Delete Error:', err.message);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};

============================================================
FILE: controllers/authController.js
============================================================
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const db = require('../config/db');
require('dotenv').config();

exports.registerUser = async (req, res) => {
    const { username, email, password } = req.body;

    try {
        const hashedPassword = await bcrypt.hash(password, 10);

        const [existing] = await db.query(
            `SELECT * FROM users WHERE email = ? OR username = ?`,
            [email, username]
        );

        if (existing.length > 0)
            return res.status(400).json({ message: "User already exists" });

        await db.query(
            `INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)`,
            [username, email, hashedPassword]
        );

        res.status(201).json({ message: "User registered successfully" });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
};

exports.loginUser = async (req, res) => {
    const { email, password } = req.body;

    try {
        const [users] = await db.query(
            `SELECT * FROM users WHERE email = ?`,
            [email]
        );

        if (users.length === 0)
            return res.status(404).json({ message: 'User Not Found' });

        const user = users[0];
        const isMatch = await bcrypt.compare(password, user.password_hash);

        if (!isMatch)
            return res.status(401).json({ message: 'Invalid Password' });

        const token = jwt.sign(
            { id: user.id, role: user.role },
            process.env.JWT_SECRET,
            { expiresIn: '1d' }
        );

        res.json({
            token,
            user: {
                id: user.id,
                username: user.username,
                email: user.email,
                role: user.role
            }
        });
    } catch (err) {
        res.status(500).json({ message: 'Server Error', error: err.message });
    }
};


============================================================
FILE: controllers/commentController.js
============================================================
const db = require('../config/db');
const jwt = require('jsonwebtoken');
require('dotenv').config();

const getUserFromToken = (authHeader) => {
  if (!authHeader) throw new Error('No token provided');
  const token = authHeader.split(' ')[1];
  return jwt.verify(token, process.env.JWT_SECRET);
};

// ✅ Add Comment
exports.addComment = async (req, res) => {
  try {
    const { content } = req.body;
    const articleId = req.params.id;
    const { id: userId } = getUserFromToken(req.headers.authorization);

    if (!content) return res.status(400).json({ error: 'Content is required' });

    const [result] = await db.query(
      'INSERT INTO comments (user_id, article_id, content) VALUES (?, ?, ?)',
      [userId, articleId, content]
    );

    const [comment] = await db.query('SELECT * FROM comments WHERE id = ?', [result.insertId]);
    res.status(201).json(comment[0]);
  } catch (err) {
    console.error('Add Comment Error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

// ✅ Get Comments for an Article (with usernames)
exports.getCommentsByArticleId = async (req, res) => {
  try {
    const articleId = req.params.id;

    const [comments] = await db.query(
      `
      SELECT comments.*, users.username 
      FROM comments 
      JOIN users ON comments.user_id = users.id 
      WHERE comments.article_id = ?
      ORDER BY comments.created_at ASC
      `,
      [articleId]
    );

    res.status(200).json(comments);
  } catch (err) {
    console.error('Get Comments Error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

// ✅ Delete Comment (owner or admin)
exports.deleteComment = async (req, res) => {
  try {
    const commentId = req.params.id;
    const { id: userId, role } = getUserFromToken(req.headers.authorization);

    let query = 'DELETE FROM comments WHERE id = ?';
    let values = [commentId];

    if (role !== 'admin') {
      query += ' AND user_id = ?';
      values.push(userId);
    }

    const [result] = await db.query(query, values);
    if (result.affectedRows === 0)
      return res.status(403).json({ error: 'Not authorized or comment not found' });

    res.json({ message: 'Comment deleted successfully' });
  } catch (err) {
    console.error('Delete Comment Error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

// ✅ Edit Comment (only owner)
exports.editComment = async (req, res) => {
  try {
    const commentId = req.params.id;
    const { content } = req.body;
    const { id: userId } = getUserFromToken(req.headers.authorization);

    const [result] = await db.query(
      'UPDATE comments SET content = ? WHERE id = ? AND user_id = ?',
      [content, commentId, userId]
    );

    if (result.affectedRows === 0)
      return res.status(403).json({ error: 'Not authorized or comment not found' });

    const [updated] = await db.query('SELECT * FROM comments WHERE id = ?', [commentId]);
    res.json(updated[0]);
  } catch (err) {
    console.error('Edit Comment Error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};


============================================================
FILE: controllers/userController.js
============================================================
const db = require('../config/db');

exports.getUserProfile = async (req, res) => {
  try {
    const userId = req.params.id;

    // Fetch user
    const [users] = await db.query('SELECT id, username, email FROM users WHERE id = ?', [userId]);
    if (users.length === 0) return res.status(404).json({ error: 'User not found' });

    // Fetch articles
    const [articles] = await db.query('SELECT id, title, created_at FROM articles WHERE user_id = ?', [userId]);

    res.json({
      user: users[0],
      articles,
    });
  } catch (err) {
    console.error('User Profile Error:', err.message);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};


============================================================
FILE: middlewares/auth.js
============================================================
// ✅ auth.js
const jwt = require('jsonwebtoken');

exports.authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader?.split(' ')[1];

  if (!token) return res.status(401).json({ message: 'Access token missing' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch {
    return res.status(403).json({ message: 'Invalid token' });
  }
};


============================================================
FILE: middlewares/errorHandler.js
============================================================
const errorHandler = (err, req, res, next) => {
  console.error('Error:', err.message);

  const statusCode = err.statusCode || 500;

  res.status(statusCode).json({
    error: err.message || 'Internal Server Error',
  });
};

module.exports = errorHandler;


============================================================
FILE: models/Article.js
============================================================
const db = require('../config/db');
const {v4:uuidv4} = require('uuid');

class Article {
    //create new article
    static async create({title,content,tags='',userId}){
        const [result] = await db.query(
            `INSERT INTO articles
            (title,content,tags,userId)
            VALUES(?,?,?,?) `, 
            [title,content,tags,userId]);

        return this.getById(result.insertId);
    }

    //get all articles
    static async getAll({tag,page=1,limit=10} = {}){
        let query =`SELECT articles.*,
        users.name AS author
        FROM articles
        LEFT JOIN users ON articles.user_id = users.id
        `;
        const params = [];
        if(tag){
            query += `WHERE tags LIKE ?`;
            params.push(`%${tag}%`);
        }
        //pagination
        query += `
        LIMIT ? OFFSET ?
        `;
        params.push(limit,(page-1)*limit);
        const [article] = await db.query(query,params);
        return article;
    }
    static async getById(id) {
        const [[article]] = await db.query(
        `SELECT 
        articles.*, 
        users.username AS author 
        FROM articles 
        LEFT JOIN users ON articles.user_id = users.id 
        WHERE articles.id = ?`,
      [id]
    );
    return article || null;
    }
    static async update(id,{title,content,tags,userId}){
        await db.query(`
            UPDATE articles
            SET title = ?, content = ?, tags = ?, updated_at = CURRENT_TIMESTAMP 
            WHERE id = ? AND user_id = ?`,
            [title, content, tags, id, userId]
        );
    }
    static async delete(id,userId){
        const [result] = await db.query(`DELETE FROM articles 
       WHERE id = ? AND user_id = ?`,[id,userId]);
       return result.affectedRows > 0;
    }
    static async getByUser(userId){
        const [articles] = await db.query(
            `SELECT * FROM articles WHERE user_id = ?`,
            [userId]
        );
        return articles || null;
    }
}

module.exports = Article;

============================================================
FILE: routes/articleRoutes.js
============================================================
const express = require('express');
const router = express.Router();

// ⛏️ Fix: Destructure the named export correctly
const { authenticateToken } = require('../middlewares/auth');

const {
  create,
  getAll,
  getById,
  update,
  delete: deleteArticle
} = require('../controllers/articleController');

const { addComment } = require('../controllers/commentController');

// 🧠 CRUD + Comment route with proper auth middleware
router.post('/articles', authenticateToken, create);
router.get('/articles', getAll);
router.get('/articles/:id', getById);
router.put('/articles/:id', authenticateToken, update);
router.delete('/articles/:id', authenticateToken, deleteArticle);
router.post('/articles/:id/comments', authenticateToken, addComment);

module.exports = router;


============================================================
FILE: routes/authRoutes.js
============================================================
const express = require('express');
const router = express.Router();
const {registerUser,loginUser
} = require('../controllers/authController');
const rateLimit = require('express-rate-limit');

const loginLimiter = rateLimit({
  windowMs: 10 * 60 * 1000, // 10 minutes
  max: 5,
  message: { error: 'Too many login attempts. Please try again later.' },
  standardHeaders: true,
  legacyHeaders: false,
});

router.post('/register',registerUser);
router.post('/login',loginUser);

module.exports = router;


============================================================
FILE: routes/commentRoutes.js
============================================================
const express = require('express');
const router = express.Router();
const {
  addComment,
  getCommentsByArticleId,
  deleteComment,
  editComment
} = require('../controllers/commentController');

// Comment routes
router.post('/articles/:id/comments', addComment);
router.get('/articles/:id/comments', getCommentsByArticleId);
router.delete('/comments/:id', deleteComment);
router.put('/comments/:id', editComment);

module.exports = router;


============================================================
FILE: routes/userRoutes.js
============================================================
const express = require('express');
const router = express.Router();
const { getUserProfile   } = require('../controllers/userController.js');
const {authenticateToken} = require('../middlewares/auth.js');

router.get('/:id/profile', authenticateToken, getUserProfile);

module.exports = router;

============================================================
FILE: tests/middleware/authMiddleware.test.js
============================================================
const jwt = require('jsonwebtoken');
const { authenticateToken } = require('../../middlewares/auth');
require('dotenv').config();

describe('authenticateToken Middleware', () => {
  const mockUser = { id: 1, email: 'test@example.com', role: 'user' };
  const secret = process.env.JWT_SECRET || 'your_secret_key';

  const getMockReqResNext = (token) => {
    const req = {
      headers: { authorization: `Bearer ${token}` },
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };
    const next = jest.fn();
    return { req, res, next };
  };

  it('should call next() if token is valid', () => {
    const token = jwt.sign(mockUser, secret);
    const { req, res, next } = getMockReqResNext(token);
    authenticateToken(req, res, next);
    expect(req.user).toEqual(expect.objectContaining({ id: mockUser.id }));
    expect(next).toHaveBeenCalled();
  });

  it('should return 401 if token is missing', () => {
    const req = { headers: {} };
    const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
    const next = jest.fn();

    authenticateToken(req, res, next);
    expect(res.status).toHaveBeenCalledWith(401);
    expect(res.json).toHaveBeenCalledWith({ message: 'Access token missing' });
    expect(next).not.toHaveBeenCalled();
  });

  it('should return 403 if token is invalid', () => {
    const { req, res, next } = getMockReqResNext('invalid.token.here');
    authenticateToken(req, res, next);
    expect(res.status).toHaveBeenCalledWith(403);
    expect(res.json).toHaveBeenCalledWith({ message: 'Invalid token' });
    expect(next).not.toHaveBeenCalled();
  });
});


============================================================
FILE: tests/utils/setup.js
============================================================
const db = require('../../config/db');

module.exports = async () => {
  // Clean or reset your test database
  await db.query('DELETE FROM comments');
  await db.query('DELETE FROM articles');
  await db.query('DELETE FROM users');
};


============================================================
FILE: tests/utils/testLoginHelper.js
============================================================
const jwt = require('jsonwebtoken');

const generateTestToken = (user = { id: 1, email: 'user@test.com', role: 'user' }) => {
  const secret = process.env.JWT_SECRET || 'your_secret_key';
  const token = jwt.sign(user, secret);
  return { token, user };
};

module.exports = { generateTestToken };


============================================================
FILE: tests/utils/testUtils.js
============================================================
const jwt = require('jsonwebtoken');

const generateToken = (user) => {
  return jwt.sign(user, process.env.JWT_SECRET || 'your_jwt_secret', {
    expiresIn: '1d',
  });
};

// Simulate a logged-in user (regular user by default)
const mockUser = {
  id: 1,
  username: 'testuser',
  email: 'test@example.com',
  role: 'user',
};

const mockAdmin = {
  id: 2,
  username: 'admin',
  email: 'admin@example.com',
  role: 'admin',
};

const getAuthHeader = (user = mockUser) => {
  const token = generateToken(user);
  return { Authorization: `Bearer ${token}` };
};

module.exports = {
  generateToken,
  mockUser,
  mockAdmin,
  getAuthHeader,
};


============================================================
FILE: tests/articles.test.js
============================================================
const request = require('supertest');
const app = require('../app');
const db = require('../config/db');
const setup  = require('./utils/setup'); // ✅ clear DB, add seed data
const { generateTestToken } = require('./utils/testLoginHelper');

let token;
let user;

beforeEach(async () => {
  await setup();

  const author = {
    username: 'author1',
    email: 'author@example.com',
    password: 'pass123',
  };

  await request(app).post('/api/auth/register').send(author);

  const res = await request(app).post('/api/auth/login').send({
    email: author.email,
    password: author.password,
  });

  token = res.body.token;
  // ✅ Outsider user
  const outsider = {
    username: 'outsider',
    email: 'outsider@example.com',
    password: 'pass456',
  };

  await request(app).post('/api/auth/register').send(outsider);

  const outsiderRes = await request(app).post('/api/auth/login').send({
    email: outsider.email,
    password: outsider.password,
  });

  outsiderToken = outsiderRes.body.token;
});

afterAll(async () => {
  await db.end();
});

describe('Articles API', () => {
  test('Should create a new article', async () => {
    const res = await request(app)
      .post('/api/articles')
      .set('Authorization', `Bearer ${token}`)
      .send({
        title: 'Test Article',
        content: 'Content goes here',
        category: 'tech',
        tags: 'react,node',
      });

    expect(res.statusCode).toBe(201);
    expect(res.body.title).toBe('Test Article');
    expect(res.body.content).toBe('Content goes here');
    expect(res.body.category).toBe('tech');
  });

  test('Should fail to create article with missing fields', async () => {
    const res = await request(app)
      .post('/api/articles')
      .set('Authorization', `Bearer ${token}`)
      .send({ title: '', content: '' });

    expect(res.statusCode).toBe(400);
    expect(res.body.message).toMatch(/required/i);
  });

  test('Should get all articles', async () => {
    const res = await request(app).get('/api/articles');
    expect(res.statusCode).toBe(200);
    expect(Array.isArray(res.body)).toBe(true);
  });

  test('Should not delete an article if user is not owner or admin', async () => {
    // First create an article
    const postRes = await request(app)
      .post('/api/articles')
      .set('Authorization', `Bearer ${token}`)
      .send({
        title: 'Another Article',
        content: 'Secret content',
        category: 'science',
        tags: 'test',
      });

    const articleId = postRes.body.id;

    // Generate token for a different user (not the article owner)
    const outsiderToken = generateTestToken({
      id: 999,
      email: 'outsider@example.com',
      role: 'user',
    }).token;

    // Try to delete it with another user
    const deleteRes = await request(app)
      .delete(`/api/articles/${articleId}`)
      .set('Authorization', `Bearer ${outsiderToken}`);

    expect(deleteRes.statusCode).toBe(403);
    expect(deleteRes.body.message).toMatch("User not found");
  });
});


============================================================
FILE: tests/auth.test.js
============================================================
const request = require('supertest');
const app = require('../app');
const db = require('../config/db');
const setup = require('./utils/setup');

beforeEach(async () => {
  await setup();
});

afterAll(async () => {
  await db.end();
});

describe('Auth API', () => {
  const user = {
    username: 'testuser',
    email: 'test@example.com',
    password: 'test123'
  };

  test('Should register a new user', async () => {
    const res = await request(app).post('/api/auth/register').send(user);

    expect(res.statusCode).toBe(201);
    expect(res.body.message).toBe('User registered successfully');
  });

  test('Should login with correct credentials', async () => {
    await request(app).post('/api/auth/register').send(user);

    const res = await request(app).post('/api/auth/login').send({
      email: user.email,
      password: user.password
    });

    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty('token');
    expect(res.body.user.email).toBe(user.email);
  });

  test('Should fail login with wrong password', async () => {
    await request(app).post('/api/auth/register').send(user);

    const res = await request(app).post('/api/auth/login').send({
      email: user.email,
      password: 'wrongpass'
    });

    expect(res.statusCode).toBe(401);
    expect(res.body.message).toBe('Invalid credentials');
  });
});


============================================================
FILE: tests/comments.test.js
============================================================
const request = require('supertest');
const app = require('../app');
const db = require('../config/db');
const setup = require('./utils/setup');

let token, articleId;

beforeEach(async () => {
  await setup();

  const user = {
    username: 'commenter',
    email: 'comm@example.com',
    password: 'pass123'
  };

  await request(app).post('/api/auth/register').send(user);

  const res = await request(app).post('/api/auth/login').send({
    email: user.email,
    password: user.password
  });

  token = res.body.token;

  const article = await request(app)
    .post('/api/articles')
    .set('Authorization', `Bearer ${token}`)
    .send({
      title: 'Article with Comments',
      content: 'Great article',
      category: 'general',
      tags: 'blog,test'
    });

  articleId = article.body.id;
});

afterAll(async () => {
  await db.end();
});

describe('Comments API', () => {
  test('Should add a comment to an article', async () => {
    const res = await request(app)
      .post(`/api/articles/${articleId}/comments`)
      .set('Authorization', `Bearer ${token}`)
      .send({ content: 'This is a comment' });

    expect(res.statusCode).toBe(201);
    expect(res.body.message).toBe('Comment added');
  });

  test('Should fetch comments for an article', async () => {
    await request(app)
      .post(`/api/articles/${articleId}/comments`)
      .set('Authorization', `Bearer ${token}`)
      .send({ content: 'Nice one!' });

    const res = await request(app).get(`/api/articles/${articleId}/comments`);
    expect(res.statusCode).toBe(200);
    expect(Array.isArray(res.body)).toBe(true);
  });
});


============================================================
FILE: app.js
============================================================
const express = require('express');
const cors = require('cors');
const app = express();

require('dotenv').config();

// Allow requests from frontend (adjust the origin if needed)
app.use(cors({
  origin: 'http://localhost:3000',
  credentials: true
}));

app.use(express.json());

// Your routes here
const authRoutes = require('./routes/authRoutes');
const articleRoutes = require('./routes/articleRoutes');
const commentRoutes = require('./routes/commentRoutes');
const userRoutes = require('./routes/userRoutes');

app.use('/api/auth', authRoutes);
app.use('/api', articleRoutes);
app.use('/api', commentRoutes); // if you're using /comments
app.use('/api', userRoutes); // if you're using /users

module.exports = app;


============================================================
FILE: hash.js
============================================================
const bcrypt = require('bcryptjs');
bcrypt.hash('admin123', 10).then(console.log);

============================================================
FILE: package.json
============================================================
{
  "name": "backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "test": "cross-env NODE_ENV=test jest --runInBand --detectOpenHandles",
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "bcrypt": "^6.0.0",
    "bcryptjs": "^3.0.2",
    "body-parser": "^2.2.0",
    "cors": "^2.8.5",
    "dotenv": "^17.2.1",
    "express": "^5.1.0",
    "express-rate-limit": "^8.0.1",
    "jsonwebtoken": "^9.0.2",
    "mysql2": "^3.14.3",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "cross-env": "^10.0.0",
    "jest": "^30.0.5",
    "nodemon": "^3.1.10",
    "supertest": "^7.1.4"
  }
}


============================================================
FILE: server.js
============================================================
const app = require('./app');
const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

============================================================
FILE: backend/eslint.config.js
============================================================
const js = require("@eslint/js");
const globals = require("globals");

module.exports = [
  js.configs.recommended,
  {
    languageOptions: {
      globals: {
        ...globals.node,
        ...globals.jest,
      },
      ecmaVersion: 2022,
      sourceType: "module",
    },
    rules: {
      "no-unused-vars": "warn",
      "no-console": "off",
      "prefer-const": "error",
      "no-var": "error",
    },
  },
  {
    ignores: ["node_modules/**", "coverage/**", "uploads/**"],
  },
];


============================================================
FILE: backend/package.json
============================================================
{
  "name": "backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "test": "cross-env NODE_ENV=test jest --runInBand --detectOpenHandles",
    "start": "node server.js",
    "dev": "nodemon server.js",
    "format": "prettier --write \"**/*.{js,jsx,ts,tsx,json,md}\"",
    "format:check": "prettier --check \"**/*.{js,jsx,ts,tsx,json,md}\"",
    "lint": "eslint \"**/*.js\" --fix",
    "lint:check": "eslint \"**/*.js\""
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "bcrypt": "^6.0.0",
    "bcryptjs": "^3.0.2",
    "body-parser": "^2.2.0",
    "cors": "^2.8.5",
    "dotenv": "^17.2.1",
    "express": "^5.1.0",
    "express-rate-limit": "^8.0.1",
    "jsonwebtoken": "^9.0.2",
    "multer": "^2.0.2",
    "mysql2": "^3.14.3",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.32.0",
    "cross-env": "^10.0.0",
    "eslint": "^9.32.0",
    "eslint-plugin-node": "^11.1.0",
    "globals": "^16.3.0",
    "jest": "^30.0.5",
    "nodemon": "^3.1.10",
    "prettier": "^3.6.2",
    "supertest": "^7.1.4"
  }
}


============================================================
FILE: backend/server.js
============================================================
const app = require("./app");
const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});


============================================================
FILE: frontend/src/api/user.js
============================================================
import axios from "../utils/axiosInstance";

export const fetchUserProfile = (id, token) => {
  return axios.get(`/users/${id}/profile`, {
    headers: { Authorization: `Bearer ${token}` },
  });
};


============================================================
FILE: frontend/src/components/ArticleCard.jsx
============================================================
// components/ArticleCard.jsx
import React from "react";
import { Link } from "react-router-dom";

const ArticleCard = ({ article }) => {
  const coverUrl = article.cover ? `/uploads/${article.cover}` : null;

  return (
    <div className="bg-white p-6 rounded shadow-md">
      {coverUrl && (
        <img
          src={coverUrl}
          alt="Cover"
          className="mb-4 w-full h-64 object-cover rounded"
        />
      )}

      <h3 className="text-xl font-semibold">{article.title}</h3>
      <p className="text-sm text-gray-500">
        By {article.author || "Unknown"} •{" "}
        {new Date(article.created_at).toLocaleDateString()}
      </p>

      <p className="mt-2 text-gray-700">{article.content.slice(0, 150)}...</p>

      <Link
        to={`/articles/${article.id}`}
        className="text-blue-500 hover:underline mt-2 inline-block"
      >
        Read More
      </Link>
    </div>
  );
};

export default ArticleCard;


============================================================
FILE: frontend/src/components/CommentSection.jsx
============================================================
import React, { useEffect, useState } from "react";
import axios from "../utils/axiosInstance";
import { useAuth } from "../context/AuthContext";
import { FaSpinner } from "react-icons/fa";
import { motion, AnimatePresence } from "framer-motion";

const CommentSection = ({ articleId }) => {
  const { user, token } = useAuth();
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState("");
  const [editingId, setEditingId] = useState(null);
  const [editingContent, setEditingContent] = useState("");
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchComments();
  }, [articleId]);

  const fetchComments = async () => {
    setLoading(true);
    try {
      const res = await axios.get(`/articles/${articleId}/comments`);
      setComments(res.data);
    } catch (err) {
      console.error("Error fetching comments:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleCommentSubmit = async (e) => {
    e.preventDefault();
    if (!newComment.trim()) return;
    try {
      await axios.post(
        `/articles/${articleId}/comments`,
        { content: newComment },
        { headers: { Authorization: `Bearer ${token}` } },
      );
      setNewComment("");
      fetchComments();
    } catch (err) {
      console.error("Error posting comment:", err);
    }
  };

  const handleDelete = async (id) => {
    try {
      await axios.delete(`/comments/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      fetchComments();
    } catch (err) {
      console.error("Error deleting comment:", err);
    }
  };

  const handleEditSubmit = async (id) => {
    try {
      await axios.put(
        `/comments/${id}`,
        { content: editingContent },
        { headers: { Authorization: `Bearer ${token}` } },
      );
      setEditingId(null);
      fetchComments();
    } catch (err) {
      console.error("Error editing comment:", err);
    }
  };

  return (
    <div className="mt-10">
      <h2 className="text-xl font-semibold mb-4">Comments</h2>

      {loading ? (
        <div className="flex items-center text-gray-500">
          <FaSpinner className="animate-spin mr-2" />
          Loading comments...
        </div>
      ) : comments.length === 0 ? (
        <p className="text-gray-500">No comments yet.</p>
      ) : (
        <ul className="mb-6 space-y-4">
          <AnimatePresence>
            {comments.map((comment) => (
              <motion.li
                key={comment.id}
                className="border p-3 rounded shadow"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
              >
                {editingId === comment.id ? (
                  <>
                    <textarea
                      className="w-full p-2 border rounded mb-2"
                      rows={2}
                      value={editingContent}
                      onChange={(e) => setEditingContent(e.target.value)}
                    />
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleEditSubmit(comment.id)}
                        className="px-3 py-1 bg-blue-600 text-white rounded"
                      >
                        Submit
                      </button>
                      <button
                        onClick={() => setEditingId(null)}
                        className="px-3 py-1 bg-gray-500 text-white rounded"
                      >
                        Cancel
                      </button>
                    </div>
                  </>
                ) : (
                  <>
                    <p className="text-gray-800 mb-1">{comment.content}</p>
                    <small className="text-gray-500 block">
                      by{" "}
                      <span className="font-medium">
                        {comment.username || "Unknown User"}
                      </span>
                    </small>
                    {user &&
                      (user.id === comment.user_id ||
                        user.role === "admin") && (
                        <div className="flex gap-3 mt-2">
                          <button
                            onClick={() => {
                              setEditingId(comment.id);
                              setEditingContent(comment.content);
                            }}
                            className="text-yellow-600 hover:underline"
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => handleDelete(comment.id)}
                            className="text-red-600 hover:underline"
                          >
                            Delete
                          </button>
                        </div>
                      )}
                  </>
                )}
              </motion.li>
            ))}
          </AnimatePresence>
        </ul>
      )}

      {user && (
        <form onSubmit={handleCommentSubmit}>
          <textarea
            className="w-full p-2 border rounded mb-2"
            placeholder="Write a comment..."
            rows={3}
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
          />
          <button
            type="submit"
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
          >
            Add Comment
          </button>
        </form>
      )}
    </div>
  );
};

export default CommentSection;


============================================================
FILE: frontend/src/components/Navbar.jsx
============================================================
import React from "react";
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
function Navbar() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const isLoggedIn = !!user;

  const handleLogout = () => {
    logout(); // Clear user & session
    navigate("/login"); // Redirect to login page
  };

  return (
    <nav className="bg-gray-800 text-white px-6 py-4 flex justify-between items-center">
      <div className="text-xl font-bold">
        <Link to="/">Blogging Platform</Link>
      </div>
      <div className="space-x-4">
        <Link to="/" className="hover:underline">
          Home
        </Link>
        <Link to="/articles" className="hover:underline">
          Articles
        </Link>
        {isLoggedIn && (
          <Link
            to="/articles/new"
            className="bg-blue-500 px-3 py-1 rounded hover:bg-blue-600"
          >
            Add Article
          </Link>
        )}
        {isLoggedIn ? (
          <>
            <Link
              to="/dashboard"
              className="text-sm text-green-600 hover:underline"
            >
              Dashboard
            </Link>
            {user?.id && (
              <Link
                to={`/users/${user.id}`}
                className="text-sm text-blue-600 hover:underline"
              >
                View Profile
              </Link>
            )}
            <button
              onClick={handleLogout}
              className="bg-red-500 px-3 py-1 rounded hover:bg-red-600"
            >
              Logout
            </button>
          </>
        ) : (
          <>
            <Link to="/login" className="hover:underline">
              Login
            </Link>
            <Link to="/register" className="hover:underline">
              Register
            </Link>
          </>
        )}
      </div>
    </nav>
  );
}

export default Navbar;


============================================================
FILE: frontend/src/components/ProtectedRoute.jsx
============================================================
import React from "react";
import { Navigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";

const ProtectedRoute = ({ children, requireAuth = true }) => {
  const { user } = useAuth();

  if (requireAuth && !user) {
    return <Navigate to="/login" replace />;
  }

  return children;
};

export default ProtectedRoute;


============================================================
FILE: frontend/src/context/AuthContext.jsx
============================================================
import React, { createContext, useContext, useState, useEffect } from "react";

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(null);

  // 🧠 Load from sessionStorage when app starts
  useEffect(() => {
    const savedUser = sessionStorage.getItem("user");
    const savedToken = sessionStorage.getItem("token");

    if (savedUser && savedToken) {
      setUser(JSON.parse(savedUser));
      setToken(savedToken);
    }
  }, []);

  // 🔐 Login method
  const login = (userData, tokenData) => {
    setUser(userData);
    setToken(tokenData);

    // Save in sessionStorage
    sessionStorage.setItem("user", JSON.stringify(userData));
    sessionStorage.setItem("token", tokenData);
  };

  // 🔓 Logout method
  const logout = () => {
    setUser(null);
    setToken(null);
    sessionStorage.clear(); // This clears all session-based info
  };

  return (
    <AuthContext.Provider value={{ user, token, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};


============================================================
FILE: frontend/src/pages/ArticleDetails.jsx
============================================================
// pages/ArticleDetails.jsx
import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "../utils/axiosInstance";
import { useAuth } from "../context/AuthContext";
import { FaSpinner, FaEdit, FaTrash } from "react-icons/fa";
import toast from "react-hot-toast";
import CommentSection from "../components/CommentSection";

const ArticleDetails = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { user, token } = useAuth();
  const [article, setArticle] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchArticle = async () => {
      try {
        setLoading(true);
        setError(null);
        const res = await axios.get(`/articles/${id}`);
        setArticle(res.data);
      } catch (err) {
        console.error("Error fetching article:", err);
        setError("Failed to load article. Please try again.");
        toast.error("Failed to load article");
      } finally {
        setLoading(false);
      }
    };
    fetchArticle();
  }, [id]);

  const handleDelete = async () => {
    if (!window.confirm("Are you sure you want to delete this article?")) {
      return;
    }

    try {
      await axios.delete(`/articles/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      toast.success("Article deleted successfully");
      navigate("/articles");
    } catch (err) {
      console.error("Error deleting article:", err);
      toast.error("Failed to delete article");
    }
  };

  const isAuthor = user && article && user.id === article.user_id;
  const isAdmin = user && user.role === "admin";

  if (loading) {
    return (
      <div className="flex items-center justify-center py-20">
        <FaSpinner className="animate-spin text-3xl text-blue-600 mr-3" />
        <span className="text-gray-600 text-lg">Loading article...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="max-w-4xl mx-auto py-10 px-4 text-center">
        <p className="text-red-600 mb-4 text-lg">{error}</p>
        <button
          onClick={() => window.location.reload()}
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          Try Again
        </button>
      </div>
    );
  }

  if (!article) {
    return (
      <div className="max-w-4xl mx-auto py-10 px-4 text-center">
        <p className="text-gray-600 text-lg">Article not found.</p>
      </div>
    );
  }

  const coverUrl = article.cover ? `/uploads/${article.cover}` : null;

  return (
    <div className="max-w-4xl mx-auto py-10 px-4">
      {/* Cover Image with Fallback */}
      {coverUrl ? (
        <img
          src={coverUrl}
          alt="Cover"
          className="w-full max-h-[500px] object-cover mb-6 rounded shadow"
          onError={(e) => {
            e.target.style.display = "none";
            e.target.nextSibling.style.display = "block";
          }}
        />
      ) : null}
      <div
        className="w-full h-64 bg-gray-200 mb-6 rounded shadow flex items-center justify-center"
        style={{ display: coverUrl ? "none" : "flex" }}
      >
        <div className="text-center text-gray-500">
          <div className="text-4xl mb-2">📄</div>
          <p>No cover image</p>
        </div>
      </div>

      {/* Article Header with Edit/Delete Buttons */}
      <div className="flex justify-between items-start mb-4">
        <div>
          <h1 className="text-3xl font-bold mb-2">{article.title}</h1>
          <p className="text-gray-500">
            By {article.author || "Unknown"} •{" "}
            {new Date(article.created_at).toLocaleDateString()}
          </p>
        </div>
        {(isAuthor || isAdmin) && (
          <div className="flex gap-2">
            <button
              onClick={() => navigate(`/articles/${id}/edit`)}
              className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 flex items-center gap-1"
            >
              <FaEdit size={14} />
              Edit
            </button>
            <button
              onClick={handleDelete}
              className="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700 flex items-center gap-1"
            >
              <FaTrash size={14} />
              Delete
            </button>
          </div>
        )}
      </div>

      {/* Article Content */}
      <div className="prose max-w-none mb-8">
        <p className="text-lg text-gray-800 whitespace-pre-wrap">
          {article.content}
        </p>
      </div>

      {/* Comments Section */}
      <CommentSection articleId={id} />
    </div>
  );
};

export default ArticleDetails;


============================================================
FILE: frontend/src/pages/ArticleForm.jsx
============================================================
// src/pages/ArticleForm.jsx
import React, { useState, useEffect } from "react";
import axios from "../utils/axiosInstance";
import { useNavigate, useParams } from "react-router-dom";
import toast from "react-hot-toast";
import { FaSpinner, FaTimes } from "react-icons/fa";
import { useAuth } from "../context/AuthContext";

const categories = [
  "Technology",
  "Lifestyle",
  "Business",
  "Education",
  "Entertainment",
];

const ArticleForm = () => {
  const { id } = useParams(); // for edit
  const { token } = useAuth();
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const [category, setCategory] = useState("");
  const [tagInput, setTagInput] = useState("");
  const [tags, setTags] = useState([]);
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [cover, setCover] = useState(null);
  const [previewUrl, setPreviewUrl] = useState(null);
  const [currentCover, setCurrentCover] = useState(null);
  const [removeCover, setRemoveCover] = useState(false);

  const navigate = useNavigate();

  const fetchArticle = async () => {
    if (!id) return;
    try {
      setLoading(true);
      const res = await axios.get(`/articles/${id}`);
      const article = res.data;
      setTitle(article.title);
      setContent(article.content);
      setCategory(article.category);
      setTags(
        article.tags ? article.tags.split(",").map((tag) => tag.trim()) : [],
      );
      setCurrentCover(article.cover);
      setLoading(false);
    } catch (err) {
      console.error(err);
      toast.error("Failed to load article");
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchArticle();
  }, [id]);

  const handleTagKeyDown = (e) => {
    if (e.key === "Enter" || e.key === ",") {
      e.preventDefault();
      if (tagInput.trim() && !tags.includes(tagInput.toLowerCase())) {
        setTags([...tags, tagInput.toLowerCase()]);
        setTagInput("");
      }
    }
  };

  const removeTag = (tagToRemove) => {
    setTags(tags.filter((tag) => tag !== tagToRemove));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!title.trim() || !content.trim() || !category) {
      toast.error("Please fill in all required fields");
      return;
    }

    setSubmitting(true);

    try {
      const formData = new FormData();
      formData.append("title", title);
      formData.append("content", content);
      formData.append("category", category);
      tags.forEach((tag, i) => formData.append(`tags[${i}]`, tag));
      if (cover) formData.append("cover", cover);
      if (removeCover) formData.append("removeCover", "true");

      if (id) {
        // Update existing article
        await axios.put(`/articles/${id}`, formData, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "multipart/form-data",
          },
        });
        toast.success("Article updated successfully!");
      } else {
        // Create new article
        await axios.post("/articles", formData, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "multipart/form-data",
          },
        });
        toast.success("Article created successfully!");
      }

      navigate("/articles");
    } catch (err) {
      console.error(err);
      toast.error(id ? "Failed to update article" : "Failed to create article");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto p-6">
      <h2 className="text-2xl font-bold mb-4">{id ? "Edit" : "New"} Article</h2>

      {loading ? (
        <p>Loading article...</p>
      ) : (
        <form
          onSubmit={handleSubmit}
          className="space-y-4"
          encType="multipart/form-data"
        >
          <input
            type="text"
            placeholder="Title"
            className="w-full p-2 border rounded"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
          />

          <textarea
            placeholder="Content"
            className="w-full p-2 border rounded h-40"
            value={content}
            onChange={(e) => setContent(e.target.value)}
            required
          />

          <select
            className="w-full p-2 border rounded"
            value={category}
            onChange={(e) => setCategory(e.target.value)}
            required
          >
            <option value="">Select Category</option>
            {categories.map((cat) => (
              <option key={cat} value={cat}>
                {cat}
              </option>
            ))}
          </select>

          <div>
            <input
              type="text"
              placeholder="Add tag and press Enter"
              className="w-full p-2 border rounded"
              value={tagInput}
              onChange={(e) => setTagInput(e.target.value)}
              onKeyDown={handleTagKeyDown}
            />
            <div className="flex flex-wrap gap-2 mt-2">
              {tags.map((tag, index) => (
                <span
                  key={index}
                  className="bg-blue-200 text-blue-800 px-2 py-1 rounded-full text-sm flex items-center gap-1"
                >
                  {tag}
                  <button
                    type="button"
                    onClick={() => removeTag(tag)}
                    className="ml-1 text-red-500 font-bold"
                  >
                    ×
                  </button>
                </span>
              ))}
            </div>
          </div>
          <div className="mb-4">
            <label className="block mb-1 font-medium text-gray-700">
              Cover Image
            </label>
            <input
              type="file"
              accept="image/*"
              onChange={(e) => {
                const file = e.target.files?.[0];
                if (file) {
                  setCover(file);
                  setPreviewUrl(URL.createObjectURL(file));
                  setRemoveCover(false); // Reset remove flag when new file is selected
                }
              }}
              className="border border-gray-300 rounded px-3 py-2 w-full"
            />

            {/* Current Cover Image (for editing) */}
            {currentCover && !previewUrl && (
              <div className="mt-3 relative">
                <img
                  src={`/uploads/${currentCover}`}
                  alt="Current cover"
                  className="w-full max-w-sm h-auto rounded shadow"
                />
                <button
                  type="button"
                  onClick={() => {
                    setCurrentCover(null);
                    setRemoveCover(true);
                  }}
                  className="absolute top-2 right-2 bg-red-600 text-white rounded-full p-1 hover:bg-red-700"
                  title="Remove cover image"
                >
                  <FaTimes size={12} />
                </button>
              </div>
            )}

            {/* New Cover Preview */}
            {previewUrl && (
              <div className="mt-3 relative">
                <img
                  src={previewUrl}
                  alt="Preview"
                  className="w-full max-w-sm h-auto rounded shadow"
                />
                <button
                  type="button"
                  onClick={() => {
                    setCover(null);
                    setPreviewUrl(null);
                    setRemoveCover(false); // Reset remove flag when clearing new file
                  }}
                  className="absolute top-2 right-2 bg-red-600 text-white rounded-full p-1 hover:bg-red-700"
                  title="Remove new cover image"
                >
                  <FaTimes size={12} />
                </button>
              </div>
            )}
          </div>

          <button
            type="submit"
            disabled={submitting}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            {submitting ? (
              <>
                <FaSpinner className="animate-spin" />
                {id ? "Updating..." : "Creating..."}
              </>
            ) : (
              <>{id ? "Update" : "Create"} Article</>
            )}
          </button>
        </form>
      )}
    </div>
  );
};

export default ArticleForm;


============================================================
FILE: frontend/src/pages/Articles.jsx
============================================================
import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link } from "react-router-dom";
import { FaSpinner } from "react-icons/fa";
import toast from "react-hot-toast";

function Articles() {
  const [articles, setArticles] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterTag, setFilterTag] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchArticles = async () => {
    try {
      setLoading(true);
      setError(null);
      const res = await axios.get("/api/articles");
      let filtered = res.data;

      // 🔍 Filter by search term (title or content)
      if (searchTerm.trim()) {
        filtered = filtered.filter(
          (article) =>
            article.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
            article.content.toLowerCase().includes(searchTerm.toLowerCase()),
        );
      }

      // 🏷️ Filter by tag
      if (filterTag.trim()) {
        filtered = filtered.filter((article) =>
          article.tags?.toLowerCase().includes(filterTag.toLowerCase()),
        );
      }

      setArticles(filtered);
    } catch (err) {
      console.error("Error fetching articles:", err);
      setError("Failed to load articles. Please try again.");
      toast.error("Failed to load articles");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchArticles();
  }, []);

  return (
    <div className="max-w-4xl mx-auto py-6 px-4">
      <h2 className="text-3xl font-bold mb-6 text-center">Latest Articles</h2>

      {/* 🔎 Search and Tag Filter */}
      <form
        onSubmit={(e) => {
          e.preventDefault();
          fetchArticles();
        }}
        className="flex flex-col md:flex-row gap-4 mb-6"
      >
        <input
          type="text"
          placeholder="Search by title or content"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="flex-1 border border-gray-300 p-2 rounded"
        />
        <input
          type="text"
          placeholder="Filter by tag"
          value={filterTag}
          onChange={(e) => setFilterTag(e.target.value)}
          className="flex-1 border border-gray-300 p-2 rounded"
        />
        <button
          type="submit"
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          Search
        </button>
      </form>

      {loading ? (
        <div className="flex items-center justify-center py-8">
          <FaSpinner className="animate-spin text-2xl text-blue-600 mr-2" />
          <span className="text-gray-600">Loading articles...</span>
        </div>
      ) : error ? (
        <div className="text-center py-8">
          <p className="text-red-600 mb-4">{error}</p>
          <button
            onClick={fetchArticles}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          >
            Try Again
          </button>
        </div>
      ) : articles.length === 0 ? (
        <p className="text-gray-600 text-center">No articles found.</p>
      ) : (
        <div className="space-y-6">
          {articles.map((article) => (
            <div key={article.id} className="bg-white p-6 rounded shadow-md">
              <h3 className="text-xl font-semibold">{article.title}</h3>
              <p className="text-sm text-gray-500">
                By {article.author || "Unknown"} •{" "}
                {new Date(article.created_at).toLocaleDateString()}
              </p>
              <p className="mt-2 text-gray-700">
                {article.content.slice(0, 150)}...
              </p>
              <Link
                to={`/articles/${article.id}`}
                className="text-blue-500 hover:underline mt-2 inline-block"
              >
                Read More
              </Link>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default Articles;


============================================================
FILE: frontend/src/pages/Home.jsx
============================================================
import React from "react";
import { Link } from "react-router-dom";

function Home() {
  return (
    <div className="text-center py-20">
      <h1 className="text-4xl font-bold text-gray-800 mb-4">
        Welcome to the Blogging Platform
      </h1>
      <p className="text-gray-600 mb-6">
        Share your thoughts, read great content, and join the community.
      </p>
      <Link
        to="/articles"
        className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded"
      >
        Browse Articles
      </Link>
    </div>
  );
}

export default Home;


============================================================
FILE: frontend/src/pages/Login.jsx
============================================================
import React, { useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";

function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();
  const { login } = useAuth(); // ✅ use context

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    try {
      const res = await axios.post("/api/auth/login", {
        email,
        password,
      });

      // ✅ Use context login function
      login(res.data.user, res.data.token);

      // ✅ Navigate to article list or homepage
      navigate("/");
    } catch (err) {
      console.error("Login Error:", err);
      setError(err.response?.data?.message || "Login failed");
    }
  };

  return (
    <div className="max-w-md mx-auto mt-20 p-8 bg-white rounded shadow">
      <h2 className="text-2xl font-bold mb-6 text-center">Login</h2>
      {error && <p className="text-red-500 text-center mb-4">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="email"
          className="w-full border px-3 py-2 rounded"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          className="w-full border px-3 py-2 rounded"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <button
          type="submit"
          className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded"
        >
          Login
        </button>
      </form>
    </div>
  );
}

export default Login;


============================================================
FILE: frontend/src/pages/Register.jsx
============================================================
import React, { useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

function Register() {
  const navigate = useNavigate();

  const [form, setForm] = useState({
    username: "",
    email: "",
    password: "",
  });

  const [error, setError] = useState("");

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    try {
      const res = await axios.post("/api/auth/register", form);
      if (res.status === 201) {
        navigate("/login");
      }
    } catch (err) {
      setError(err.response?.data?.message || "Registration failed");
    }
  };

  return (
    <div className="max-w-md mx-auto mt-10 bg-white shadow-md rounded p-6">
      <h2 className="text-2xl font-semibold mb-6 text-center">Register</h2>

      {error && <p className="text-red-500 mb-4">{error}</p>}

      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          name="username"
          placeholder="Username"
          value={form.username}
          onChange={handleChange}
          required
          className="w-full border border-gray-300 p-2 rounded"
        />

        <input
          type="email"
          name="email"
          placeholder="Email"
          value={form.email}
          onChange={handleChange}
          required
          className="w-full border border-gray-300 p-2 rounded"
        />

        <input
          type="password"
          name="password"
          placeholder="Password"
          value={form.password}
          onChange={handleChange}
          required
          className="w-full border border-gray-300 p-2 rounded"
        />

        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
        >
          Register
        </button>
      </form>
    </div>
  );
}

export default Register;


============================================================
FILE: frontend/src/pages/UserDashboard.jsx
============================================================
import React, { useEffect, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { Link } from "react-router-dom";
import { FaSpinner, FaEdit, FaTrash, FaEye } from "react-icons/fa";
import toast from "react-hot-toast";
import axios from "../utils/axiosInstance";

const UserDashboard = () => {
  const { user, token } = useAuth();
  const [articles, setArticles] = useState([]);
  const [comments, setComments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("articles");

  useEffect(() => {
    fetchUserData();
  }, []);

  const fetchUserData = async () => {
    try {
      setLoading(true);
      const [articlesRes, profileRes] = await Promise.all([
        axios.get(`/users/${user.id}/articles`, {
          headers: { Authorization: `Bearer ${token}` },
        }),
        axios.get(`/users/${user.id}/profile`, {
          headers: { Authorization: `Bearer ${token}` },
        }),
      ]);

      setArticles(articlesRes.data || []);
      setComments(profileRes.data.comments || []);
    } catch (err) {
      console.error("Error fetching user data:", err);
      toast.error("Failed to load dashboard data");
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteArticle = async (articleId) => {
    if (!window.confirm("Are you sure you want to delete this article?")) {
      return;
    }

    try {
      await axios.delete(`/articles/${articleId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      toast.success("Article deleted successfully");
      fetchUserData(); // Refresh the list
    } catch (err) {
      console.error("Error deleting article:", err);
      toast.error("Failed to delete article");
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-20">
        <FaSpinner className="animate-spin text-3xl text-blue-600 mr-3" />
        <span className="text-gray-600 text-lg">Loading dashboard...</span>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto py-8 px-4">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-2">Dashboard</h1>
        <p className="text-gray-600">Welcome back, {user.username}!</p>
      </div>

      {/* Tab Navigation */}
      <div className="flex border-b border-gray-200 mb-6">
        <button
          onClick={() => setActiveTab("articles")}
          className={`px-4 py-2 font-medium ${
            activeTab === "articles"
              ? "text-blue-600 border-b-2 border-blue-600"
              : "text-gray-500 hover:text-gray-700"
          }`}
        >
          My Articles ({articles.length})
        </button>
        <button
          onClick={() => setActiveTab("comments")}
          className={`px-4 py-2 font-medium ${
            activeTab === "comments"
              ? "text-blue-600 border-b-2 border-blue-600"
              : "text-gray-500 hover:text-gray-700"
          }`}
        >
          My Comments ({comments.length})
        </button>
      </div>

      {/* Articles Tab */}
      {activeTab === "articles" && (
        <div>
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-semibold">My Articles</h2>
            <Link
              to="/articles/new"
              className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
            >
              Write New Article
            </Link>
          </div>

          {articles.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-500 mb-4">
                You haven't written any articles yet.
              </p>
              <Link
                to="/articles/new"
                className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
              >
                Write Your First Article
              </Link>
            </div>
          ) : (
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {articles.map((article) => (
                <div
                  key={article.id}
                  className="bg-white rounded-lg shadow-md overflow-hidden"
                >
                  {article.cover && (
                    <img
                      src={`/uploads/${article.cover}`}
                      alt="Cover"
                      className="w-full h-48 object-cover"
                    />
                  )}
                  <div className="p-4">
                    <h3 className="text-lg font-semibold mb-2">
                      {article.title}
                    </h3>
                    <p className="text-gray-600 text-sm mb-3">
                      {new Date(article.created_at).toLocaleDateString()}
                    </p>
                    <p className="text-gray-700 mb-4 line-clamp-3">
                      {article.content.substring(0, 100)}...
                    </p>
                    <div className="flex gap-2">
                      <Link
                        to={`/articles/${article.id}`}
                        className="flex items-center gap-1 text-blue-600 hover:text-blue-700"
                      >
                        <FaEye size={14} />
                        View
                      </Link>
                      <Link
                        to={`/articles/${article.id}/edit`}
                        className="flex items-center gap-1 text-green-600 hover:text-green-700"
                      >
                        <FaEdit size={14} />
                        Edit
                      </Link>
                      <button
                        onClick={() => handleDeleteArticle(article.id)}
                        className="flex items-center gap-1 text-red-600 hover:text-red-700"
                      >
                        <FaTrash size={14} />
                        Delete
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* Comments Tab */}
      {activeTab === "comments" && (
        <div>
          <h2 className="text-2xl font-semibold mb-6">My Comments</h2>

          {comments.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-500">
                You haven't made any comments yet.
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {comments.map((comment) => (
                <div
                  key={comment.id}
                  className="bg-white rounded-lg shadow-md p-4"
                >
                  <p className="text-gray-800 mb-2">{comment.content}</p>
                  <div className="flex justify-between items-center text-sm text-gray-500">
                    <span>
                      On article:{" "}
                      {comment.article_title ||
                        `Article #${comment.article_id}`}
                    </span>
                    <span>
                      {new Date(comment.created_at).toLocaleDateString()}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default UserDashboard;


============================================================
FILE: frontend/src/pages/UserProfile.jsx
============================================================
// src/pages/UserProfile.jsx
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { fetchUserProfile } from "../api/user";
import { useAuth } from "../context/AuthContext";
import ArticleCard from "../components/ArticleCard";

const UserProfile = () => {
  const { userid } = useParams();
  const { token } = useAuth();
  const [data, setData] = useState({ articles: [], comments: [] });

  useEffect(() => {
    const loadProfile = async () => {
      try {
        const res = await fetchUserProfile(userid, token);
        const { articles = [], comments = [] } = res.data || {};
        setData({ articles, comments });
      } catch (err) {
        console.error(err);
      }
    };
    loadProfile();
  }, [userid, token]);

  return (
    <div className="max-w-4xl mx-auto mt-10">
      <h2 className="text-2xl font-bold mb-4">User Profile</h2>
      <h3 className="text-xl font-semibold mb-2">Articles</h3>
      {data.articles.length === 0 ? (
        <p>No articles yet.</p>
      ) : (
        data.articles.map((article) => (
          <ArticleCard key={article.userid} article={article} />
        ))
      )}

      <h3 className="text-xl font-semibold mt-6 mb-2">Comments</h3>
      {data.comments.length === 0 ? (
        <p>No comments yet.</p>
      ) : (
        <ul className="space-y-2">
          {data.comments.map((comment) => (
            <li key={comment.userid} className="border p-2 rounded">
              <p>{comment.content}</p>
              <small>On article userid: {comment.article_userid}</small>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default UserProfile;


============================================================
FILE: frontend/src/utils/axiosInstance.js
============================================================
// src/utils/axiosInstance.js
import axios from "axios";

const axiosInstance = axios.create({
  baseURL: process.env.REACT_APP_API_URL || "/api", // Use environment variable or relative URL
  headers: {
    "Content-Type": "application/json",
  },
});

// Automatically add token if available
axiosInstance.interceptors.request.use((config) => {
  const token = localStorage.getItem("token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default axiosInstance;


============================================================
FILE: frontend/src/App.css
============================================================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


============================================================
FILE: frontend/src/App.js
============================================================
import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Home from "./pages/Home";
import Login from "./pages/Login";
import Articles from "./pages/Articles";
import Register from "./pages/Register";
import Navbar from "./components/Navbar";
import ArticleDetails from "./pages/ArticleDetails";
import ArticleForm from "./pages/ArticleForm";
import UserProfile from "./pages/UserProfile";
import UserDashboard from "./pages/UserDashboard";
import ProtectedRoute from "./components/ProtectedRoute";

function App() {
  return (
    <Router>
      <Navbar />
      <div className="p-4">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/articles" element={<Articles />} />
          <Route
            path="/articles/new"
            element={
              <ProtectedRoute>
                <ArticleForm />
              </ProtectedRoute>
            }
          />
          <Route
            path="/articles/:id/edit"
            element={
              <ProtectedRoute>
                <ArticleForm />
              </ProtectedRoute>
            }
          />
          <Route path="/articles/:id" element={<ArticleDetails />} />
          <Route
            path="/users/:userid"
            element={
              <ProtectedRoute>
                <UserProfile />
              </ProtectedRoute>
            }
          />
          <Route
            path="/dashboard"
            element={
              <ProtectedRoute>
                <UserDashboard />
              </ProtectedRoute>
            }
          />
        </Routes>
      </div>
    </Router>
  );
}

export default App;


============================================================
FILE: frontend/src/App.test.js
============================================================
import { render, screen } from "@testing-library/react";
import App from "./App";

test("renders learn react link", () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


============================================================
FILE: frontend/src/index.css
============================================================
@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";


============================================================
FILE: frontend/src/index.js
============================================================
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { AuthProvider } from "./context/AuthContext";
import { Toaster } from "react-hot-toast";
import "./index.css";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <AuthProvider>
      <App />
      <Toaster />
    </AuthProvider>
  </React.StrictMode>,
);


============================================================
FILE: frontend/src/logo.svg
============================================================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

============================================================
FILE: frontend/src/reportWebVitals.js
============================================================
const reportWebVitals = (onPerfEntry) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import("web-vitals").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


============================================================
FILE: frontend/src/setupTests.js
============================================================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import "@testing-library/jest-dom";


============================================================
FILE: frontend/code.txt
============================================================
The following is a digest of the repository "frontend".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: frontend
Files Analyzed: 26
Total Text Size: 34.64 KB
Estimated Tokens (text only): ~10,147

--- DIRECTORY STRUCTURE ---
frontend/
├── src/
│   ├── api/
│   │   └── user.js
│   ├── components/
│   │   ├── ArticleCard.jsx
│   │   ├── CommentSection.jsx
│   │   └── Navbar.jsx
│   ├── context/
│   │   └── AuthContext.jsx
│   ├── pages/
│   │   ├── ArticleDetails.jsx
│   │   ├── ArticleForm.jsx
│   │   ├── Articles.jsx
│   │   ├── Home.jsx
│   │   ├── Login.jsx
│   │   ├── Register.jsx
│   │   └── UserProfile.jsx
│   ├── services/
│   │   └── api.js
│   ├── utils/
│   │   └── axiosInstance.js
│   ├── App.css
│   ├── App.js
│   ├── App.test.js
│   ├── index.css
│   ├── index.js
│   ├── logo.svg
│   ├── reportWebVitals.js
│   └── setupTests.js
├── package.json
├── postcss.config.js
├── README.md
└── tailwind.config.js


--- FILE CONTENTS ---
============================================================
FILE: src/api/user.js
============================================================
import axios from '../utils/axiosInstance';

export const fetchUserProfile = (id, token) => {
  return axios.get(`/users/${id}/profile`, {
    headers: { Authorization: `Bearer ${token}` }
  });
};


============================================================
FILE: src/components/ArticleCard.jsx
============================================================
import React from 'react';
import { Link } from 'react-router-dom';

const ArticleCard = ({ article }) => {
  return (
    <div className="bg-white p-4 rounded shadow hover:shadow-lg transition">
      <h2 className="text-xl font-bold mb-2">{article.title}</h2>
      <p className="text-gray-500 text-sm mb-2">Category: {article.category}</p>
      <p className="mb-4 text-gray-700 line-clamp-3">{article.content.slice(0, 150)}...</p>
      <Link
        to={`/articles/${article.id}`}
        className="text-blue-600 hover:underline font-medium"
      >
        Read More
      </Link>
    </div>
  );
};

export default ArticleCard;

============================================================
FILE: src/components/CommentSection.jsx
============================================================
import React, { useEffect, useState } from 'react';
import axios from '../utils/axiosInstance';
import { useAuth } from '../context/AuthContext';
import { FaSpinner } from 'react-icons/fa';
import { motion, AnimatePresence } from 'framer-motion';

const CommentSection = ({ articleId }) => {
  const { user, token } = useAuth();
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');
  const [editingId, setEditingId] = useState(null);
  const [editingContent, setEditingContent] = useState('');
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchComments();
  }, [articleId]);

  const fetchComments = async () => {
    setLoading(true);
    try {
      const res = await axios.get(`/articles/${articleId}/comments`);
      setComments(res.data);
    } catch (err) {
      console.error('Error fetching comments:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleCommentSubmit = async (e) => {
    e.preventDefault();
    if (!newComment.trim()) return;
    try {
      await axios.post(
        `/articles/${articleId}/comments`,
        { content: newComment },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setNewComment('');
      fetchComments();
    } catch (err) {
      console.error('Error posting comment:', err);
    }
  };

  const handleDelete = async (id) => {
    try {
      await axios.delete(`/comments/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      fetchComments();
    } catch (err) {
      console.error('Error deleting comment:', err);
    }
  };

  const handleEditSubmit = async (id) => {
    try {
      await axios.put(
        `/comments/${id}`,
        { content: editingContent },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setEditingId(null);
      fetchComments();
    } catch (err) {
      console.error('Error editing comment:', err);
    }
  };

  return (
    <div className="mt-10">
      <h2 className="text-xl font-semibold mb-4">Comments</h2>

      {loading ? (
        <div className="flex items-center text-gray-500">
          <FaSpinner className="animate-spin mr-2" />
          Loading comments...
        </div>
      ) : comments.length === 0 ? (
        <p className="text-gray-500">No comments yet.</p>
      ) : (
        <ul className="mb-6 space-y-4">
          <AnimatePresence>
            {comments.map((comment) => (
              <motion.li
                key={comment.id}
                className="border p-3 rounded shadow"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
              >
                {editingId === comment.id ? (
                  <>
                    <textarea
                      className="w-full p-2 border rounded mb-2"
                      rows={2}
                      value={editingContent}
                      onChange={(e) => setEditingContent(e.target.value)}
                    />
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleEditSubmit(comment.id)}
                        className="px-3 py-1 bg-blue-600 text-white rounded"
                      >
                        Submit
                      </button>
                      <button
                        onClick={() => setEditingId(null)}
                        className="px-3 py-1 bg-gray-500 text-white rounded"
                      >
                        Cancel
                      </button>
                    </div>
                  </>
                ) : (
                  <>
                    <p className="text-gray-800 mb-1">{comment.content}</p>
                    <small className="text-gray-500 block">
                      by <span className="font-medium">{comment.username || 'Unknown User'}</span>
                    </small>
                    {user && (user.id === comment.user_id || user.role === 'admin') && (
                      <div className="flex gap-3 mt-2">
                        <button
                          onClick={() => {
                            setEditingId(comment.id);
                            setEditingContent(comment.content);
                          }}
                          className="text-yellow-600 hover:underline"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => handleDelete(comment.id)}
                          className="text-red-600 hover:underline"
                        >
                          Delete
                        </button>
                      </div>
                    )}
                  </>
                )}
              </motion.li>
            ))}
          </AnimatePresence>
        </ul>
      )}

      {user && (
        <form onSubmit={handleCommentSubmit}>
          <textarea
            className="w-full p-2 border rounded mb-2"
            placeholder="Write a comment..."
            rows={3}
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
          />
          <button
            type="submit"
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
          >
            Add Comment
          </button>
        </form>
      )}
    </div>
  );
};

export default CommentSection;


============================================================
FILE: src/components/Navbar.jsx
============================================================
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import {useAuth} from '../context/AuthContext';
function Navbar() {
    const {user,logout} = useAuth(); 
    const navigate = useNavigate();
    const isLoggedIn = !!user;

    const handleLogout = () => {
        logout();            // Clear user & session
        navigate('/login');  // Redirect to login page
    };

    console.log('Navbar user:', user);

  return (
    <nav className="bg-gray-800 text-white px-6 py-4 flex justify-between items-center">
      <div className="text-xl font-bold">
        <Link to="/">Blogging Platform</Link>
      </div>
      <div className="space-x-4">
        <Link to="/" className="hover:underline">Home</Link>
        <Link to="/articles" className="hover:underline">Articles</Link>
        {isLoggedIn && (
          <Link
            to="/articles/new"
            className="bg-blue-500 px-3 py-1 rounded hover:bg-blue-600"
          >
            Add Article
          </Link>
        )}
        {isLoggedIn ? (
          <>
            {user?.id && (
  <Link to={`/users/${user.id}`} className="text-sm text-blue-600 hover:underline">
    View Profile
  </Link>
)}
            <button onClick={handleLogout} className="bg-red-500 px-3 py-1 rounded hover:bg-red-600">
              Logout
            </button>
          </>
        ) : (
          <>
            <Link to="/login" className="hover:underline">Login</Link>
            <Link to="/register" className="hover:underline">Register</Link>
          </>
        )}
      </div>
    </nav>
  );
}

export default Navbar;


============================================================
FILE: src/context/AuthContext.jsx
============================================================
import React, { createContext, useContext, useState, useEffect } from 'react';

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(null);

  // 🧠 Load from sessionStorage when app starts
  useEffect(() => {
    const savedUser = sessionStorage.getItem('user');
    const savedToken = sessionStorage.getItem('token');

    if (savedUser && savedToken) {
      setUser(JSON.parse(savedUser));
      setToken(savedToken);
    }
  }, []);

  // 🔐 Login method
  const login = (userData, tokenData) => {
    setUser(userData);
    setToken(tokenData);

    // Save in sessionStorage
    sessionStorage.setItem('user', JSON.stringify(userData));
    sessionStorage.setItem('token', tokenData);
  };

  // 🔓 Logout method
  const logout = () => {
    setUser(null);
    setToken(null);
    sessionStorage.clear(); // This clears all session-based info
  };

  return (
    <AuthContext.Provider value={{ user, token, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};


============================================================
FILE: src/pages/ArticleDetails.jsx
============================================================
    import React, { useEffect, useState } from 'react';
    import { useParams, useNavigate, Link } from 'react-router-dom';
    import axios from '../utils/axiosInstance';
    import { useAuth } from '../context/AuthContext';
    import CommentSection from '../components/CommentSection';

    const ArticleDetails = () => {
    const { id } = useParams();
    const { user, token } = useAuth();
    const navigate = useNavigate();

    const [article, setArticle] = useState(null);


    useEffect(() => {
        fetchArticle();
    }, [id]);

    const fetchArticle = async () => {
        try {
        const res = await axios.get(`/articles/${id}`);
        setArticle(res.data);
        } catch (err) {
        console.error(err);
        }
    };


    const handleDelete = async () => {
        try {
        await axios.delete(`/articles/${id}`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        navigate('/');
        } catch (err) {
        console.error(err);
        }
    };

    if (!article) return <div className="text-center mt-10">Loading article...</div>;

    return (
        <div className="max-w-3xl mx-auto mt-10 p-6 bg-white rounded shadow">
        <h1 className="text-3xl font-bold mb-2">{article.title}</h1>
        <p className="text-sm text-gray-500 mb-4">
    Category: {article.category} | Tags:{' '}
    {article.tags
        ? article.tags.split(',').map(tag => tag.trim()).join(', ')
        : 'No tags'}
    </p>

        <p className="mb-6">{article.content}</p>

        {(user?.id === article.user_id || user?.role === 'admin') && (
            <div className="flex space-x-4 mb-6">
            <Link
                to={`/edit/${article.id}`}
                className="px-4 py-1 bg-yellow-400 hover:bg-yellow-500 text-white rounded"
            >
                Edit
            </Link>
            <button
                onClick={handleDelete}
                className="px-4 py-1 bg-red-500 hover:bg-red-600 text-white rounded"
            >
                Delete
            </button>
            </div>
        )}

        <hr className="my-6" />
        <CommentSection articleId={article.id} />
        </div>
    );
    };

    export default ArticleDetails;


============================================================
FILE: src/pages/ArticleForm.jsx
============================================================
// src/pages/ArticleForm.jsx
import React, { useState, useEffect } from 'react';
import axios from '../utils/axiosInstance';
import { useNavigate, useParams } from 'react-router-dom';
import toast from 'react-hot-toast';

const categories = ['Technology', 'Lifestyle', 'Business', 'Education', 'Entertainment'];

const ArticleForm = () => {
  const { id } = useParams(); // for edit
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [category, setCategory] = useState('');
  const [tagInput, setTagInput] = useState('');
  const [tags, setTags] = useState([]);
  const [loading, setLoading] = useState(false);

  const navigate = useNavigate();

  const fetchArticle = async () => {
    if (!id) return;
    try {
      setLoading(true);
      const res = await axios.get(`/articles/${id}`);
      const article = res.data;
      setTitle(article.title);
      setContent(article.content);
      setCategory(article.category);
      setTags(article.tags ? article.tags.split(',').map(tag => tag.trim()) : []);
      setLoading(false);
    } catch (err) {
      console.error(err);
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchArticle();
  }, [id]);

  const handleTagKeyDown = (e) => {
    if (e.key === 'Enter' || e.key === ',') {
      e.preventDefault();
      if (tagInput.trim() && !tags.includes(tagInput.toLowerCase())) {
        setTags([...tags, tagInput.toLowerCase()]);
        setTagInput('');
      }
    }
  };

  const removeTag = (tagToRemove) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
  };

const handleSubmit = async (e) => {
  e.preventDefault();
  try {
    const token = sessionStorage.getItem('token'); // or sessionStorage.getItem('token')

    const articleData = {
      title,
      content,
      category,
      tags: tags.join(','),
    };

    const config = {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    };

    const response = id
      ? await axios.put(`/articles/${id}`, articleData, config)
      : await axios.post('/articles', articleData, config);

    toast.success(`Article ${id ? 'updated' : 'created'} successfully!`);
    navigate(`/articles/${response.data.id}`);
  } catch (err) {
    console.error('❌ Create/Edit Error:', err.response?.data || err.message);
    toast.error(err.response?.data?.error || 'Something went wrong.');
  }
};


  return (
    <div className="max-w-3xl mx-auto p-6">
      <h2 className="text-2xl font-bold mb-4">{id ? 'Edit' : 'New'} Article</h2>

      {loading ? (
        <p>Loading article...</p>
      ) : (
        <form onSubmit={handleSubmit} className="space-y-4">
          <input
            type="text"
            placeholder="Title"
            className="w-full p-2 border rounded"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
          />

          <textarea
            placeholder="Content"
            className="w-full p-2 border rounded h-40"
            value={content}
            onChange={(e) => setContent(e.target.value)}
            required
          />

          <select
            className="w-full p-2 border rounded"
            value={category}
            onChange={(e) => setCategory(e.target.value)}
            required
          >
            <option value="">Select Category</option>
            {categories.map(cat => (
              <option key={cat} value={cat}>{cat}</option>
            ))}
          </select>

          <div>
            <input
              type="text"
              placeholder="Add tag and press Enter"
              className="w-full p-2 border rounded"
              value={tagInput}
              onChange={(e) => setTagInput(e.target.value)}
              onKeyDown={handleTagKeyDown}
            />
            <div className="flex flex-wrap gap-2 mt-2">
              {tags.map((tag, index) => (
                <span
                  key={index}
                  className="bg-blue-200 text-blue-800 px-2 py-1 rounded-full text-sm flex items-center gap-1"
                >
                  {tag}
                  <button
                    type="button"
                    onClick={() => removeTag(tag)}
                    className="ml-1 text-red-500 font-bold"
                  >
                    ×
                  </button>
                </span>
              ))}
            </div>
          </div>

          <button
            type="submit"
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          >
            {id ? 'Update' : 'Create'} Article
          </button>
        </form>
      )}
    </div>
  );
};

export default ArticleForm;


============================================================
FILE: src/pages/Articles.jsx
============================================================
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';

function Articles() {
  const [articles, setArticles] = useState([]);

  useEffect(() => {
    axios.get('http://localhost:5000/api/articles')
      .then(res => setArticles(res.data))
      .catch(err => console.error('Error fetching articles:', err));
  }, []);

  return (
    <div className="max-w-4xl mx-auto py-6">
      <h2 className="text-3xl font-bold mb-6 text-center">Latest Articles</h2>

      {articles.length === 0 ? (
        <p className="text-gray-600 text-center">No articles found.</p>
      ) : (
        <div className="space-y-6">
          {articles.map(article => (
            <div key={article.id} className="bg-white p-6 rounded shadow-md">
              <h3 className="text-xl font-semibold">{article.title}</h3>
              <p className="text-sm text-gray-500">
                By {article.author || 'Unknown'} • {new Date(article.created_at).toLocaleDateString()}
              </p>
              <p className="mt-2 text-gray-700">
                {article.content.slice(0, 150)}...
              </p>
              <Link
                to={`/articles/${article.id}`}
                className="text-blue-500 hover:underline mt-2 inline-block"
              >
                Read More
              </Link>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default Articles;


============================================================
FILE: src/pages/Home.jsx
============================================================
import React from 'react';
import { Link } from 'react-router-dom';

function Home() {
  return (
    <div className="text-center py-20">
      <h1 className="text-4xl font-bold text-gray-800 mb-4">Welcome to the Blogging Platform</h1>
      <p className="text-gray-600 mb-6">Share your thoughts, read great content, and join the community.</p>
      <Link to="/articles" className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded">
        Browse Articles
      </Link>
    </div>
  );
}

export default Home;


============================================================
FILE: src/pages/Login.jsx
============================================================
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const { login } = useAuth(); // ✅ use context

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');

    try {
      const res = await axios.post('http://localhost:5000/api/auth/login', { email, password });
      
      console.log('USER FROM LOGIN:', res.data.user);
console.log('TOKEN FROM LOGIN:', res.data.token);
      // ✅ Use context login function
      login(res.data.user, res.data.token);
      console.log('Login response:', res.data);

      // ✅ Navigate to article list or homepage
      navigate('/');
    } catch (err) {
      console.error('Login Error:', err);
      setError(err.response?.data?.message || 'Login failed');
      
    }
  };

  return (
    <div className="max-w-md mx-auto mt-20 p-8 bg-white rounded shadow">
      <h2 className="text-2xl font-bold mb-6 text-center">Login</h2>
      {error && <p className="text-red-500 text-center mb-4">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="email"
          className="w-full border px-3 py-2 rounded"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          className="w-full border px-3 py-2 rounded"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <button type="submit" className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded">
          Login
        </button>
      </form>
    </div>
  );
}

export default Login;


============================================================
FILE: src/pages/Register.jsx
============================================================
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

function Register() {
  const navigate = useNavigate();

  const [form, setForm] = useState({
    username: '',
    email: '',
    password: '',
  });

  const [error, setError] = useState('');

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');

    try {
      const res = await axios.post('http://localhost:5000/api/auth/register', form);
      if (res.status === 201) {
        navigate('/login');
      }
    } catch (err) {
      setError(err.response?.data?.message || 'Registration failed');
    }
  };

  return (
    <div className="max-w-md mx-auto mt-10 bg-white shadow-md rounded p-6">
      <h2 className="text-2xl font-semibold mb-6 text-center">Register</h2>

      {error && <p className="text-red-500 mb-4">{error}</p>}

      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          name="username"
          placeholder="Username"
          value={form.username}
          onChange={handleChange}
          required
          className="w-full border border-gray-300 p-2 rounded"
        />

        <input
          type="email"
          name="email"
          placeholder="Email"
          value={form.email}
          onChange={handleChange}
          required
          className="w-full border border-gray-300 p-2 rounded"
        />

        <input
          type="password"
          name="password"
          placeholder="Password"
          value={form.password}
          onChange={handleChange}
          required
          className="w-full border border-gray-300 p-2 rounded"
        />

        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
        >
          Register
        </button>
      </form>
    </div>
  );
}

export default Register;


============================================================
FILE: src/pages/UserProfile.jsx
============================================================
// src/pages/UserProfile.jsx
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { fetchUserProfile } from '../api/user';
import { useAuth } from '../context/AuthContext';
import ArticleCard from '../components/ArticleCard';

const UserProfile = () => {
  const { userid } = useParams();
  const { token } = useAuth();
  const [data, setData] = useState({ articles: [], comments: [] });

  useEffect(() => {
    const loadProfile = async () => {
      try {
        const res = await fetchUserProfile(userid, token);
        setData(res.data);
      } catch (err) {
        console.error(err);
      }
    };
    loadProfile();
  }, [userid, token]);

  return (
    <div className="max-w-4xl mx-auto mt-10">
      <h2 className="text-2xl font-bold mb-4">User Profile</h2>
      <h3 className="text-xl font-semibold mb-2">Articles</h3>
      {data.articles.length === 0 ? (
        <p>No articles yet.</p>
      ) : (
        data.articles.map((article) => (
          <ArticleCard key={article.userid} article={article} />
        ))
      )}

      <h3 className="text-xl font-semibold mt-6 mb-2">Comments</h3>
      {data.comments.length === 0 ? (
        <p>No comments yet.</p>
      ) : (
        <ul className="space-y-2">
          {data.comments.map((comment) => (
            <li key={comment.userid} className="border p-2 rounded">
              <p>{comment.content}</p>
              <small>On article userid: {comment.article_userid}</small>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default UserProfile;


============================================================
FILE: src/utils/axiosInstance.js
============================================================
// src/utils/axiosInstance.js
import axios from 'axios';

const axiosInstance = axios.create({
  baseURL: 'http://localhost:5000/api', // Adjust if your backend uses a different port
  headers: {
    'Content-Type': 'application/json',
  },
});

// Automatically add token if available
axiosInstance.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default axiosInstance;


============================================================
FILE: src/App.css
============================================================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


============================================================
FILE: src/App.js
============================================================
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import Login from './pages/Login';
import Articles from './pages/Articles';
import Register from './pages/Register';
import Navbar from './components/Navbar';
import ArticleDetails from './pages/ArticleDetails';
import ArticleForm  from './pages/ArticleForm';
import UserProfile from './pages/UserProfile';

function App() {
  return (
    <Router>
      <Navbar />
      <div className="p-4">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/articles" element={<Articles />} />
          <Route path="/articles/new" element={<ArticleForm />} />
          <Route path="/articles/:id/edit" element={<ArticleForm />} />
          <Route path="/articles/:id" element={<ArticleDetails />} />
          <Route path="/users/:userid" element={<UserProfile />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;


============================================================
FILE: src/App.test.js
============================================================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


============================================================
FILE: src/index.css
============================================================
@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";

============================================================
FILE: src/index.js
============================================================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { AuthProvider } from './context/AuthContext';
import { Toaster } from 'react-hot-toast';
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <AuthProvider>
        <App />
        <Toaster />
    </AuthProvider>
  </React.StrictMode>
);


============================================================
FILE: src/logo.svg
============================================================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

============================================================
FILE: src/reportWebVitals.js
============================================================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


============================================================
FILE: src/setupTests.js
============================================================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


============================================================
FILE: package.json
============================================================
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/dom": "^10.4.1",
    "@testing-library/jest-dom": "^6.6.4",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.11.0",
    "framer-motion": "^12.23.12",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-hot-toast": "^2.5.2",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.7.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17"
  }
}


============================================================
FILE: postcss.config.js
============================================================
module.exports = {
  plugins: [
    require('tailwindcss'),
    require('autoprefixer'),
  ],
}

============================================================
FILE: README.md
============================================================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


============================================================
FILE: tailwind.config.js
============================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

============================================================
FILE: frontend/eslint.config.js
============================================================
const js = require("@eslint/js");
const globals = require("globals");
const reactHooks = require("eslint-plugin-react-hooks");
const react = require("eslint-plugin-react");

module.exports = [
  js.configs.recommended,
  {
    files: ["src/**/*.{js,jsx}"],
    languageOptions: {
      globals: {
        ...globals.browser,
        ...globals.es2021,
      },
      ecmaVersion: 2022,
      sourceType: "module",
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
      },
    },
    plugins: {
      react,
      "react-hooks": reactHooks,
    },
    settings: {
      react: {
        version: "detect",
      },
    },
    rules: {
      ...react.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      "no-unused-vars": "warn",
      "no-console": "warn",
      "prefer-const": "error",
      "no-var": "error",
      "react/react-in-jsx-scope": "off",
      "react/prop-types": "off",
    },
  },
  {
    files: ["src/**/*.test.{js,jsx}", "src/**/*.spec.{js,jsx}"],
    languageOptions: {
      globals: {
        ...globals.browser,
        ...globals.es2021,
        ...globals.jest,
      },
    },
  },
  {
    ignores: ["node_modules/**", "build/**", "public/**"],
  },
];


============================================================
FILE: frontend/eslint.config.mjs
============================================================
import js from "@eslint/js";
import globals from "globals";
import pluginReact from "eslint-plugin-react";
import { defineConfig } from "eslint/config";

export default defineConfig([
  { files: ["**/*.{js,mjs,cjs,jsx}"], plugins: { js }, extends: ["js/recommended"], languageOptions: { globals: globals.browser } },
  { files: ["**/*.js"], languageOptions: { sourceType: "commonjs" } },
  pluginReact.configs.flat.recommended,
]);


============================================================
FILE: frontend/package.json
============================================================
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/dom": "^10.4.1",
    "@testing-library/jest-dom": "^6.6.4",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.11.0",
    "framer-motion": "^12.23.12",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-hot-toast": "^2.5.2",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.7.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "format": "prettier --write \"src/**/*.{js,jsx,ts,tsx,json,css,md}\"",
    "format:check": "prettier --check \"src/**/*.{js,jsx,ts,tsx,json,css,md}\"",
    "lint": "eslint \"src/**/*.{js,jsx}\" --fix",
    "lint:check": "eslint \"src/**/*.{js,jsx}\""
  },
  "proxy": "http://localhost:5000",
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@eslint/js": "^9.32.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "prettier": "^3.6.2",
    "tailwindcss": "^3.4.17"
  }
}


============================================================
FILE: frontend/postcss.config.js
============================================================
module.exports = {
  plugins: [require("tailwindcss"), require("autoprefixer")],
};


============================================================
FILE: frontend/README.md
============================================================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


============================================================
FILE: frontend/tailwind.config.js
============================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};


============================================================
FILE: eslint.config.js
============================================================
const js = require('@eslint/js');
const globals = require('globals');

module.exports = [
  js.configs.recommended,
  {
    files: ['backend/**/*.js'],
    languageOptions: {
      globals: {
        ...globals.node,
        ...globals.jest,
      },
      ecmaVersion: 2022,
      sourceType: 'module',
    },
    rules: {
      'no-unused-vars': 'warn',
      'no-console': 'off',
      'prefer-const': 'error',
      'no-var': 'error',
    },
  },
  {
    files: ['frontend/src/**/*.{js,jsx}'],
    languageOptions: {
      globals: {
        ...globals.browser,
        ...globals.es2021,
      },
      ecmaVersion: 2022,
      sourceType: 'module',
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
      },
    },
    rules: {
      'no-unused-vars': 'warn',
      'no-console': 'warn',
      'prefer-const': 'error',
      'no-var': 'error',
    },
  },
  {
    ignores: [
      'node_modules/**',
      'coverage/**',
      'uploads/**',
      'build/**',
      'dist/**',
      'frontend/build/**',
      'frontend/public/**',
    ],
  },
];


============================================================
FILE: LICENSE
============================================================
MIT License

Copyright (c) 2024 Blogging Platform

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. 

============================================================
FILE: package.json
============================================================
{
  "scripts": {
    "format": "prettier --write \"**/*.{js,jsx,ts,tsx,json,css,md}\"",
    "format:check": "prettier --check \"**/*.{js,jsx,ts,tsx,json,css,md}\"",
    "lint": "eslint \"**/*.{js,jsx}\" --fix",
    "lint:check": "eslint \"**/*.{js,jsx}\"",
    "install:all": "npm install && cd backend && npm install && cd ../frontend && npm install",
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
    "dev:backend": "cd backend && npm run dev",
    "dev:frontend": "cd frontend && npm start",
    "build": "cd frontend && npm run build",
    "test": "cd backend && npm test",
    "test:frontend": "cd frontend && npm test"
  },
  "devDependencies": {
    "eslint": "^9.32.0",
    "prettier": "^3.6.2",
    "concurrently": "^8.2.2"
  }
}


============================================================
FILE: README.md
============================================================
# Blogging Platform

A full-stack blogging platform built with React.js, Node.js, Express.js, and MySQL. Features include user authentication, article management, comments, image uploads, and a modern responsive UI.

## 🚀 Features

### Core Features

- **User Authentication**: Register, login, and JWT-based session management
- **Article Management**: Create, read, update, and delete articles
- **Image Uploads**: Cover image support with file validation
- **Comments System**: Add, edit, and delete comments on articles
- **User Profiles**: View user profiles with their articles and comments
- **User Dashboard**: Personal dashboard for managing articles and comments

### UI/UX Features

- **Responsive Design**: Works on desktop, tablet, and mobile
- **Loading States**: Smooth loading indicators throughout the app
- **Error Handling**: Comprehensive error messages and user feedback
- **Toast Notifications**: Success and error notifications
- **Modern UI**: Clean, modern interface with Tailwind CSS
- **Image Fallbacks**: Placeholder images for missing cover images

### Security Features

- **JWT Authentication**: Secure token-based authentication
- **Route Protection**: Protected routes for authenticated users
- **Input Validation**: Server-side validation for all inputs
- **File Upload Security**: File type and size validation
- **Authorization**: Role-based access control (user/admin)

## 📁 Project Structure

```
blogging-platform/
├── backend/                 # Node.js/Express.js backend
│   ├── config/             # Database and JWT configuration
│   ├── controllers/        # Business logic controllers
│   ├── middlewares/        # Authentication and validation
│   ├── models/             # Data models
│   ├── routes/             # API route definitions
│   ├── uploads/            # File upload storage
│   ├── utils/              # Utility functions
│   └── tests/              # Backend tests
├── frontend/               # React.js frontend
│   ├── src/
│   │   ├── api/            # API service functions
│   │   ├── components/     # Reusable UI components
│   │   ├── context/        # React context (AuthContext)
│   │   ├── pages/          # Page components
│   │   ├── services/       # API service layer
│   │   └── utils/          # Utility functions
│   └── public/             # Static assets
└── database/               # Database schema and migrations
```

## 🛠️ Technology Stack

### Backend

- **Node.js** - JavaScript runtime
- **Express.js** - Web framework
- **MySQL** - Database
- **JWT** - Authentication
- **Multer** - File upload handling
- **bcryptjs** - Password hashing
- **Jest** - Testing framework

### Frontend

- **React.js** - UI library
- **React Router** - Client-side routing
- **Tailwind CSS** - Styling framework
- **Axios** - HTTP client
- **React Hot Toast** - Notifications
- **React Icons** - Icon library
- **Framer Motion** - Animations

## 📋 Prerequisites

- Node.js (v14 or higher)
- MySQL (v8.0 or higher)
- npm or yarn

## 🔧 Installation & Setup

### 1. Clone the Repository

```bash
git clone <repository-url>
cd blogging-platform
```

### 2. Backend Setup

```bash
cd backend
npm install
```

Create a `.env` file in the backend directory:

```env
# Database Configuration
DB_HOST=localhost
DB_USER=your_db_user
DB_PASS=your_db_password
DB_NAME=blog_db

# JWT Configuration
JWT_SECRET=your_super_secret_jwt_key_here

# Server Configuration
PORT=5000
NODE_ENV=development

# Frontend URL (for CORS)
FRONTEND_URL=http://localhost:3000
```

### 3. Database Setup

```bash
# Create the database
mysql -u root -p
CREATE DATABASE blog_db;
USE blog_db;

# Run the initialization script
source database/init.sql;
```

### 4. Frontend Setup

```bash
cd frontend
npm install
```

### 5. Start the Application

**Backend:**

```bash
cd backend
npm run dev
```

**Frontend:**

```bash
cd frontend
npm start
```

The application will be available at:

- Frontend: http://localhost:3000
- Backend API: http://localhost:5000

## 📚 API Documentation

### Authentication Endpoints

- `POST /api/auth/register` - User registration
- `POST /api/auth/login` - User login

### Article Endpoints

- `GET /api/articles` - Get all articles (with search/filter)
- `POST /api/articles` - Create article (requires auth)
- `GET /api/articles/:id` - Get specific article
- `PUT /api/articles/:id` - Update article (requires auth)
- `DELETE /api/articles/:id` - Delete article (requires auth)

### Comment Endpoints

- `POST /api/articles/:id/comments` - Add comment (requires auth)
- `GET /api/articles/:id/comments` - Get article comments
- `PUT /api/comments/:id` - Edit comment (requires auth)
- `DELETE /api/comments/:id` - Delete comment (requires auth)

### User Endpoints

- `GET /api/users/:id/profile` - Get user profile (requires auth)
- `GET /api/users/:id/articles` - Get user's articles (requires auth)

## 🧪 Testing

### Backend Tests

```bash
cd backend
npm test
```

### Frontend Tests

```bash
cd frontend
npm test
```

## 🚀 Deployment

### Backend Deployment

1. Set up environment variables for production in `.env`:
   ```env
   NODE_ENV=production
   DB_HOST=your_production_db_host
   DB_USER=your_production_db_user
   DB_PASS=your_production_db_password
   DB_NAME=your_production_db_name
   JWT_SECRET=your_production_jwt_secret
   PORT=5000
   FRONTEND_URL=https://your-frontend-domain.com
   ```
2. Install dependencies: `npm install --production`
3. Start the server: `npm start`

### Frontend Deployment

1. Create `.env` file with production API URL:
   ```env
   REACT_APP_API_URL=https://your-api-domain.com/api
   ```
2. Build the application: `npm run build`
3. Deploy the `build` folder to your hosting service (Netlify, Vercel, etc.)

### Same-Domain Deployment (Recommended)

For better security and performance, deploy both frontend and backend on the same domain:

1. Backend serves API at `/api/*`
2. Frontend serves static files at root
3. Use relative URLs: `REACT_APP_API_URL=/api`

## 🔒 Security Considerations

- JWT tokens expire after 24 hours
- Passwords are hashed using bcrypt
- File uploads are validated for type and size
- CORS is configured for security
- Input validation on both frontend and backend
- SQL injection protection through parameterized queries

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Submit a pull request

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🐛 Known Issues

- None currently reported

## 🔮 Future Enhancements

- [ ] Real-time notifications
- [ ] Rich text editor for articles
- [ ] Image optimization and compression
- [ ] Social media sharing
- [ ] Article categories and tags management
- [ ] User roles and permissions
- [ ] Search functionality with filters
- [ ] Pagination for articles and comments
- [ ] Email notifications
- [ ] Dark mode theme

## 📞 Support

For support and questions, please open an issue in the repository.